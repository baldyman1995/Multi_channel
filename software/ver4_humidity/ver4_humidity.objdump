
ver4_humidity.elf:     file format elf32-littlenios2
ver4_humidity.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004180

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x00001514 memsz 0x00001514 flags r-x
    LOAD off    0x00002534 vaddr 0x00005534 paddr 0x00005628 align 2**12
         filesz 0x000000f4 memsz 0x000000f4 flags rw-
    LOAD off    0x0000271c vaddr 0x0000571c paddr 0x0000571c align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001374  00004180  00004180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000040  000054f4  000054f4  000024f4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f4  00005534  00005628  00002534  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  0000571c  0000571c  0000271c  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  0000583c  0000583c  00002628  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00002628  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000450  00000000  00000000  00002650  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000599d  00000000  00000000  00002aa0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 0000206b  00000000  00000000  0000843d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000022f7  00000000  00000000  0000a4a8  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000630  00000000  00000000  0000c7a0  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00001762  00000000  00000000  0000cdd0  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001c85  00000000  00000000  0000e532  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  000101b8  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000318  00000000  00000000  000101c8  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  000119b2  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  000119b5  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  000119c1  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  000119c2  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  000119c3  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  000119c7  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  000119cb  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  000119cf  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 0000002c  00000000  00000000  000119d3  2**0
                  CONTENTS, READONLY
 26 .jdi          0000388d  00000000  00000000  000119ff  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000a117d  00000000  00000000  0001528c  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004180 l    d  .text	00000000 .text
000054f4 l    d  .rodata	00000000 .rodata
00005534 l    d  .rwdata	00000000 .rwdata
0000571c l    d  .bss	00000000 .bss
0000583c l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ver4_humidity_bsp//obj/HAL/src/crt0.o
000041b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
000041bc l     F .text	0000011c freq_isr
000043f4 l     F .text	00000144 uart_isr
0000571c l     O .bss	00000001 rx_data
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
000047b0 l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00005534 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00005738 g     O .bss	00000004 alt_instruction_exception_handler
00004684 g     F .text	0000001c putchar
0000533c g     F .text	0000002c alt_main
000046a0 g     F .text	00000080 _puts_r
0000573c g     O .bss	00000100 alt_irq
00005628 g       *ABS*	00000000 __flash_rwdata_start
00004630 g     F .text	0000004c printf
000054ec g     F .text	00000008 altera_nios2_gen2_irq_init
00004000 g     F .entry	0000000c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
00005724 g     O .bss	00000004 errno
00005730 g     O .bss	00000004 alt_argv
0000d614 g       *ABS*	00000000 _gp
0000467c g     F .text	00000008 _putchar_r
00004720 g     F .text	00000014 puts
00005478 g     F .text	00000074 alt_exception_cause_generated_bad_addr
000045f4 g     F .text	0000003c _printf_r
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00005018 g     F .text	00000064 .hidden __udivsi3
000051c8 g     F .text	00000094 alt_irq_register
00005614 g     O .rwdata	00000004 _global_impure_ptr
0000583c g       *ABS*	00000000 __bss_end
00005160 g     F .text	00000068 alt_iic_isr_register
00005148 g     F .text	00000018 alt_ic_irq_enabled
00005728 g     O .bss	00000004 alt_irq_active
000040fc g     F .exceptions	00000060 alt_irq_handler
00005470 g     F .text	00000004 alt_dcache_flush_all
00005720 g     O .bss	00000004 timer_isr_context
00005628 g       *ABS*	00000000 __ram_rwdata_end
00004538 g     F .text	00000054 timer_init
00005368 g     F .text	00000060 write
00004e70 g     F .text	00000058 _putc_r
00005534 g       *ABS*	00000000 __ram_rodata_end
0000507c g     F .text	00000058 .hidden __umodsi3
0000583c g       *ABS*	00000000 end
000053ec g     F .text	00000084 altera_avalon_uart_write
0000415c g     F .exceptions	00000024 alt_instruction_exception_entry
00008000 g       *ABS*	00000000 __alt_stack_pointer
000042d8 g     F .text	0000003c uart_init
0000481c g     F .text	0000052c ___vfprintf_internal_r
00004180 g     F .text	0000003c _start
000053e8 g     F .text	00000004 alt_sys_init
00004750 g     F .text	00000060 strncmp
000045cc g     F .text	00000028 .hidden __mulsi3
00005534 g       *ABS*	00000000 __ram_rwdata_start
000054f4 g       *ABS*	00000000 __ram_rodata_start
0000583c g       *ABS*	00000000 __alt_stack_base
00004d64 g     F .text	000000b8 __sfvwrite_small_dev
0000571c g       *ABS*	00000000 __bss_start
0000458c g     F .text	00000040 main
0000572c g     O .bss	00000004 alt_envp
00005624 g     O .rwdata	00000004 alt_errno
00004e1c g     F .text	00000054 putc
00004f20 g     F .text	00000084 .hidden __divsi3
000054f4 g       *ABS*	00000000 __flash_rodata_start
000053c8 g     F .text	00000020 alt_irq_init
00004ec8 g     F .text	00000058 _write_r
00005618 g     O .rwdata	00000004 _impure_ptr
00005734 g     O .bss	00000004 alt_argc
00004020 g       .exceptions	00000000 alt_irq_entry
00004314 g     F .text	000000e0 pwm
00004020 g       *ABS*	00000000 __ram_exceptions_start
000050d4 g     F .text	00000004 alt_ic_isr_register
00005628 g       *ABS*	00000000 _edata
0000583c g       *ABS*	00000000 _end
00004180 g       *ABS*	00000000 __ram_exceptions_end
00005110 g     F .text	00000038 alt_ic_irq_disable
00004fa4 g     F .text	00000074 .hidden __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
00004020 g     F .exceptions	00000000 alt_exception
00005620 g     O .rwdata	00000004 uart
0000400c g       .entry	00000000 _exit
00004734 g     F .text	0000001c strlen
00005474 g     F .text	00000004 alt_icache_flush_all
0000561c g     O .rwdata	00000004 alt_priority_mask
000050d8 g     F .text	00000038 alt_ic_irq_enable
00004d48 g     F .text	0000001c __vfprintf_internal
0000525c g     F .text	000000e0 alt_load



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08506014 	ori	at,at,16768
    jmp r1
    4008:	0800683a 	jmp	at

0000400c <_exit>:
	...

Disassembly of section .exceptions:

00004020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    4020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    4024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    4028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    4030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    4034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    4038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    4040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    4044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    4048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    4050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    4054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    4058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    4060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    4064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    4068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    4070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    4074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    4078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    407c:	10000326 	beq	r2,zero,408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    4080:	20000226 	beq	r4,zero,408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    4084:	00040fc0 	call	40fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    4088:	00000706 	br	40a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    408c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    4090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    4094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    4098:	000415c0 	call	415c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    409c:	1000021e 	bne	r2,zero,40a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    40a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    40a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    40a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    40ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    40b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    40b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    40b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    40bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    40c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    40c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    40c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    40cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    40d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    40d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    40d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    40dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    40e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    40e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    40e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    40ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    40f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    40f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    40f8:	ef80083a 	eret

000040fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    40fc:	defffe04 	addi	sp,sp,-8
    4100:	dfc00115 	stw	ra,4(sp)
    4104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    4108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    410c:	04000034 	movhi	r16,0
    4110:	8415cf04 	addi	r16,r16,22332

  active = alt_irq_pending ();

  do
  {
    i = 0;
    4114:	0005883a 	mov	r2,zero
    mask = 1;
    4118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    411c:	20ca703a 	and	r5,r4,r3
    4120:	28000b26 	beq	r5,zero,4150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    4124:	100490fa 	slli	r2,r2,3
    4128:	8085883a 	add	r2,r16,r2
    412c:	10c00017 	ldw	r3,0(r2)
    4130:	11000117 	ldw	r4,4(r2)
    4134:	183ee83a 	callr	r3
    4138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    413c:	203ff51e 	bne	r4,zero,4114 <_gp+0xffff6b00>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    4140:	dfc00117 	ldw	ra,4(sp)
    4144:	dc000017 	ldw	r16,0(sp)
    4148:	dec00204 	addi	sp,sp,8
    414c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    4150:	18c7883a 	add	r3,r3,r3
      i++;
    4154:	10800044 	addi	r2,r2,1

    } while (1);
    4158:	003ff006 	br	411c <_gp+0xffff6b08>

0000415c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    415c:	d0a04917 	ldw	r2,-32476(gp)
    4160:	10000426 	beq	r2,zero,4174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    4164:	200b883a 	mov	r5,r4
    4168:	000d883a 	mov	r6,zero
    416c:	013fffc4 	movi	r4,-1
    4170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    4174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
    4178:	0005883a 	mov	r2,zero
    417c:	f800283a 	ret

Disassembly of section .text:

00004180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4180:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4184:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
    4188:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    418c:	d6b58514 	ori	gp,gp,54804
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4194:	1095c714 	ori	r2,r2,22300

    movhi r3, %hi(__bss_end)
    4198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    419c:	18d60f14 	ori	r3,r3,22588

    beq r2, r3, 1f
    41a0:	10c00326 	beq	r2,r3,41b0 <_start+0x30>

0:
    stw zero, (r2)
    41a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    41a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    41ac:	10fffd36 	bltu	r2,r3,41a4 <_gp+0xffff6b90>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    41b0:	000525c0 	call	525c <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    41b4:	000533c0 	call	533c <alt_main>

000041b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    41b8:	003fff06 	br	41b8 <_gp+0xffff6ba4>

000041bc <freq_isr>:
	IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE,0X80);
	printf("Initialized \n");
	printf("***************** \n");
}

static void freq_isr(){
    41bc:	defffb04 	addi	sp,sp,-20
    41c0:	dfc00415 	stw	ra,16(sp)
    41c4:	dcc00315 	stw	r19,12(sp)
    41c8:	dc800215 	stw	r18,8(sp)
    41cc:	dc400115 	stw	r17,4(sp)
    41d0:	dc000015 	stw	r16,0(sp)

	// interrupt function to send frequency data through uart
	// reset the timer
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE,
    41d4:	00a40814 	movui	r2,36896
    41d8:	00ffff84 	movi	r3,-2
    41dc:	10c00035 	stwio	r3,0(r2)
	alt_u32 p = 0x000000;
	alt_u32 h = 0x0000;
	alt_u32 t = 0x0000;
	int i;
	for(i=0;i<8;i++){
		switch(i){
    41e0:	04c00034 	movhi	r19,0
	// " " is useful when collecting datas
	alt_u32 p = 0x000000;
	alt_u32 h = 0x0000;
	alt_u32 t = 0x0000;
	int i;
	for(i=0;i<8;i++){
    41e4:	0021883a 	mov	r16,zero
		switch(i){
    41e8:	04400184 	movi	r17,6
			case 0:p = IORD_ALTERA_AVALON_PIO_DATA(FREQ_0_BASE);break;
    41ec:	04a43814 	movui	r18,37088
	alt_u32 p = 0x000000;
	alt_u32 h = 0x0000;
	alt_u32 t = 0x0000;
	int i;
	for(i=0;i<8;i++){
		switch(i){
    41f0:	9cd08304 	addi	r19,r19,16908
    41f4:	80bfffc4 	addi	r2,r16,-1
    41f8:	88800b36 	bltu	r17,r2,4228 <freq_isr+0x6c>
    41fc:	100490ba 	slli	r2,r2,2
    4200:	14c5883a 	add	r2,r2,r19
    4204:	10800017 	ldw	r2,0(r2)
    4208:	1000683a 	jmp	r2
    420c:	00004230 	cmpltui	zero,zero,264
    4210:	00004238 	rdprs	zero,zero,264
    4214:	00004240 	call	424 <__alt_mem_onchip_memory2_0-0x3bdc>
    4218:	00004248 	cmpgei	zero,zero,265
    421c:	00004250 	cmplti	zero,zero,265
    4220:	00004258 	cmpnei	zero,zero,265
    4224:	00004260 	cmpeqi	zero,zero,265
			case 0:p = IORD_ALTERA_AVALON_PIO_DATA(FREQ_0_BASE);break;
    4228:	91400037 	ldwio	r5,0(r18)
    422c:	00000e06 	br	4268 <freq_isr+0xac>
			case 1:p = IORD_ALTERA_AVALON_PIO_DATA(FREQ_1_BASE);break;
    4230:	00a43c14 	movui	r2,37104
    4234:	00000b06 	br	4264 <freq_isr+0xa8>
			case 2:p = IORD_ALTERA_AVALON_PIO_DATA(FREQ_2_BASE);break;
    4238:	00a44014 	movui	r2,37120
    423c:	00000906 	br	4264 <freq_isr+0xa8>
			case 3:p = IORD_ALTERA_AVALON_PIO_DATA(FREQ_3_BASE);break;
    4240:	00a44414 	movui	r2,37136
    4244:	00000706 	br	4264 <freq_isr+0xa8>
			case 4:p = IORD_ALTERA_AVALON_PIO_DATA(FREQ_4_BASE);break;
    4248:	00a44814 	movui	r2,37152
    424c:	00000506 	br	4264 <freq_isr+0xa8>
			case 5:p = IORD_ALTERA_AVALON_PIO_DATA(FREQ_5_BASE);break;
    4250:	00a44c14 	movui	r2,37168
    4254:	00000306 	br	4264 <freq_isr+0xa8>
			case 6:p = IORD_ALTERA_AVALON_PIO_DATA(FREQ_6_BASE);break;
    4258:	00a45014 	movui	r2,37184
    425c:	00000106 	br	4264 <freq_isr+0xa8>
			case 7:p = IORD_ALTERA_AVALON_PIO_DATA(FREQ_7_BASE);break;
    4260:	00a45414 	movui	r2,37200
    4264:	11400037 	ldwio	r5,0(r2)
			};
		printf("%u",p);
    4268:	01000034 	movhi	r4,0
    426c:	21153d04 	addi	r4,r4,21748
    4270:	00046300 	call	4630 <printf>
		printf(" ");
    4274:	01000804 	movi	r4,32
    4278:	00046840 	call	4684 <putchar>
	// " " is useful when collecting datas
	alt_u32 p = 0x000000;
	alt_u32 h = 0x0000;
	alt_u32 t = 0x0000;
	int i;
	for(i=0;i<8;i++){
    427c:	84000044 	addi	r16,r16,1
    4280:	00800204 	movi	r2,8
    4284:	80bfdb1e 	bne	r16,r2,41f4 <_gp+0xffff6be0>
			};
		printf("%u",p);
		printf(" ");
	}
	h = IORD_ALTERA_AVALON_PIO_DATA(HUM_BASE);
	printf("%u",h);
    4288:	00a41014 	movui	r2,36928
    428c:	11400037 	ldwio	r5,0(r2)
    4290:	01000034 	movhi	r4,0
    4294:	21153d04 	addi	r4,r4,21748
    4298:	00046300 	call	4630 <printf>
	printf(" ");
    429c:	01000804 	movi	r4,32
    42a0:	00046840 	call	4684 <putchar>
	t = IORD_ALTERA_AVALON_PIO_DATA(TEM_BASE);
	printf("%u",t);
    42a4:	00a41414 	movui	r2,36944
    42a8:	11400037 	ldwio	r5,0(r2)
    42ac:	01000034 	movhi	r4,0
    42b0:	21153d04 	addi	r4,r4,21748
    42b4:	00046300 	call	4630 <printf>
	printf("\n");
    42b8:	01000284 	movi	r4,10

}
    42bc:	dfc00417 	ldw	ra,16(sp)
    42c0:	dcc00317 	ldw	r19,12(sp)
    42c4:	dc800217 	ldw	r18,8(sp)
    42c8:	dc400117 	ldw	r17,4(sp)
    42cc:	dc000017 	ldw	r16,0(sp)
    42d0:	dec00504 	addi	sp,sp,20
	h = IORD_ALTERA_AVALON_PIO_DATA(HUM_BASE);
	printf("%u",h);
	printf(" ");
	t = IORD_ALTERA_AVALON_PIO_DATA(TEM_BASE);
	printf("%u",t);
	printf("\n");
    42d4:	00046841 	jmpi	4684 <putchar>

000042d8 <uart_init>:
static alt_u8 tx_data = 0;

unsigned int timer_isr_context;


void uart_init(){
    42d8:	deffff04 	addi	sp,sp,-4
    42dc:	dfc00015 	stw	ra,0(sp)

	//do the initialization for uart and send back the finish signal
	IOWR_ALTERA_AVALON_UART_STATUS(UART_BASE,0);
    42e0:	00a40214 	movui	r2,36872
    42e4:	10000035 	stwio	zero,0(r2)
	IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE,0X80);
    42e8:	00a40314 	movui	r2,36876
    42ec:	00c02004 	movi	r3,128
    42f0:	10c00035 	stwio	r3,0(r2)
	printf("Initialized \n");
    42f4:	01000034 	movhi	r4,0
    42f8:	21153e04 	addi	r4,r4,21752
    42fc:	00047200 	call	4720 <puts>
	printf("***************** \n");
    4300:	01000034 	movhi	r4,0
    4304:	21154204 	addi	r4,r4,21768
}
    4308:	dfc00017 	ldw	ra,0(sp)
    430c:	dec00104 	addi	sp,sp,4

	//do the initialization for uart and send back the finish signal
	IOWR_ALTERA_AVALON_UART_STATUS(UART_BASE,0);
	IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE,0X80);
	printf("Initialized \n");
	printf("***************** \n");
    4310:	00047201 	jmpi	4720 <puts>

00004314 <pwm>:

	};

}

void pwm(int *get_perc){
    4314:	defffe04 	addi	sp,sp,-8
			for(int j=0;j<data_pwm[i];j++){
				pwm_rec = pwm_rec + 1;
			}


			switch(i){
    4318:	02800034 	movhi	r10,0

	};

}

void pwm(int *get_perc){
    431c:	dfc00115 	stw	ra,4(sp)
    4320:	dc000015 	stw	r16,0(sp)
	int *data_pwm = get_perc;// data in int form
	int i;//index
	int pwm_rec = 0x00;//hex form data

	// change the int data into HEX form and send to PIO
	for(i=0;i<8;i++){
    4324:	000b883a 	mov	r5,zero

		if(data_pwm[i]<=100){
    4328:	01c01904 	movi	r7,100
			for(int j=0;j<data_pwm[i];j++){
				pwm_rec = pwm_rec + 1;
			}


			switch(i){
    432c:	02000184 	movi	r8,6
				case 0:IOWR_ALTERA_AVALON_PIO_DATA(PWM_0_BASE,pwm_rec);break;
    4330:	02641814 	movui	r9,36960
			for(int j=0;j<data_pwm[i];j++){
				pwm_rec = pwm_rec + 1;
			}


			switch(i){
    4334:	5290e004 	addi	r10,r10,17280
				case 2:IOWR_ALTERA_AVALON_PIO_DATA(PWM_2_BASE,pwm_rec);break;
				case 3:IOWR_ALTERA_AVALON_PIO_DATA(PWM_3_BASE,pwm_rec);break;
				case 4:IOWR_ALTERA_AVALON_PIO_DATA(PWM_4_BASE,pwm_rec);break;
				case 5:IOWR_ALTERA_AVALON_PIO_DATA(PWM_5_BASE,pwm_rec);break;
				case 6:IOWR_ALTERA_AVALON_PIO_DATA(PWM_6_BASE,pwm_rec);break;
				case 7:IOWR_ALTERA_AVALON_PIO_DATA(PWM_7_BASE,pwm_rec);break;
    4338:	02e43414 	movui	r11,37072
				case 1:IOWR_ALTERA_AVALON_PIO_DATA(PWM_1_BASE,pwm_rec);break;
				case 2:IOWR_ALTERA_AVALON_PIO_DATA(PWM_2_BASE,pwm_rec);break;
				case 3:IOWR_ALTERA_AVALON_PIO_DATA(PWM_3_BASE,pwm_rec);break;
				case 4:IOWR_ALTERA_AVALON_PIO_DATA(PWM_4_BASE,pwm_rec);break;
				case 5:IOWR_ALTERA_AVALON_PIO_DATA(PWM_5_BASE,pwm_rec);break;
				case 6:IOWR_ALTERA_AVALON_PIO_DATA(PWM_6_BASE,pwm_rec);break;
    433c:	03242c14 	movui	r12,37040
				case 0:IOWR_ALTERA_AVALON_PIO_DATA(PWM_0_BASE,pwm_rec);break;
				case 1:IOWR_ALTERA_AVALON_PIO_DATA(PWM_1_BASE,pwm_rec);break;
				case 2:IOWR_ALTERA_AVALON_PIO_DATA(PWM_2_BASE,pwm_rec);break;
				case 3:IOWR_ALTERA_AVALON_PIO_DATA(PWM_3_BASE,pwm_rec);break;
				case 4:IOWR_ALTERA_AVALON_PIO_DATA(PWM_4_BASE,pwm_rec);break;
				case 5:IOWR_ALTERA_AVALON_PIO_DATA(PWM_5_BASE,pwm_rec);break;
    4340:	03643014 	movui	r13,37056
			switch(i){
				case 0:IOWR_ALTERA_AVALON_PIO_DATA(PWM_0_BASE,pwm_rec);break;
				case 1:IOWR_ALTERA_AVALON_PIO_DATA(PWM_1_BASE,pwm_rec);break;
				case 2:IOWR_ALTERA_AVALON_PIO_DATA(PWM_2_BASE,pwm_rec);break;
				case 3:IOWR_ALTERA_AVALON_PIO_DATA(PWM_3_BASE,pwm_rec);break;
				case 4:IOWR_ALTERA_AVALON_PIO_DATA(PWM_4_BASE,pwm_rec);break;
    4344:	03a42814 	movui	r14,37024

			switch(i){
				case 0:IOWR_ALTERA_AVALON_PIO_DATA(PWM_0_BASE,pwm_rec);break;
				case 1:IOWR_ALTERA_AVALON_PIO_DATA(PWM_1_BASE,pwm_rec);break;
				case 2:IOWR_ALTERA_AVALON_PIO_DATA(PWM_2_BASE,pwm_rec);break;
				case 3:IOWR_ALTERA_AVALON_PIO_DATA(PWM_3_BASE,pwm_rec);break;
    4348:	03e42414 	movui	r15,37008


			switch(i){
				case 0:IOWR_ALTERA_AVALON_PIO_DATA(PWM_0_BASE,pwm_rec);break;
				case 1:IOWR_ALTERA_AVALON_PIO_DATA(PWM_1_BASE,pwm_rec);break;
				case 2:IOWR_ALTERA_AVALON_PIO_DATA(PWM_2_BASE,pwm_rec);break;
    434c:	07e42014 	movui	ra,36992
			}


			switch(i){
				case 0:IOWR_ALTERA_AVALON_PIO_DATA(PWM_0_BASE,pwm_rec);break;
				case 1:IOWR_ALTERA_AVALON_PIO_DATA(PWM_1_BASE,pwm_rec);break;
    4350:	04241c14 	movui	r16,36976
	int *data_pwm = get_perc;// data in int form
	int i;//index
	int pwm_rec = 0x00;//hex form data

	// change the int data into HEX form and send to PIO
	for(i=0;i<8;i++){
    4354:	01800204 	movi	r6,8

		if(data_pwm[i]<=100){
    4358:	20800017 	ldw	r2,0(r4)
    435c:	38801e16 	blt	r7,r2,43d8 <pwm+0xc4>
    4360:	1000010e 	bge	r2,zero,4368 <pwm+0x54>
    4364:	0005883a 	mov	r2,zero
			for(int j=0;j<data_pwm[i];j++){
				pwm_rec = pwm_rec + 1;
			}


			switch(i){
    4368:	28ffffc4 	addi	r3,r5,-1
    436c:	40c00b36 	bltu	r8,r3,439c <pwm+0x88>
    4370:	180690ba 	slli	r3,r3,2
    4374:	1a87883a 	add	r3,r3,r10
    4378:	18c00017 	ldw	r3,0(r3)
    437c:	1800683a 	jmp	r3
    4380:	000043a4 	muli	zero,zero,270
    4384:	000043ac 	andhi	zero,zero,270
    4388:	000043b4 	movhi	zero,270
    438c:	000043bc 	xorhi	zero,zero,270
    4390:	000043c4 	movi	zero,271
    4394:	000043cc 	andi	zero,zero,271
    4398:	000043d4 	movui	zero,271
				case 0:IOWR_ALTERA_AVALON_PIO_DATA(PWM_0_BASE,pwm_rec);break;
    439c:	48800035 	stwio	r2,0(r9)
    43a0:	00000d06 	br	43d8 <pwm+0xc4>
				case 1:IOWR_ALTERA_AVALON_PIO_DATA(PWM_1_BASE,pwm_rec);break;
    43a4:	80800035 	stwio	r2,0(r16)
    43a8:	00000b06 	br	43d8 <pwm+0xc4>
				case 2:IOWR_ALTERA_AVALON_PIO_DATA(PWM_2_BASE,pwm_rec);break;
    43ac:	f8800035 	stwio	r2,0(ra)
    43b0:	00000906 	br	43d8 <pwm+0xc4>
				case 3:IOWR_ALTERA_AVALON_PIO_DATA(PWM_3_BASE,pwm_rec);break;
    43b4:	78800035 	stwio	r2,0(r15)
    43b8:	00000706 	br	43d8 <pwm+0xc4>
				case 4:IOWR_ALTERA_AVALON_PIO_DATA(PWM_4_BASE,pwm_rec);break;
    43bc:	70800035 	stwio	r2,0(r14)
    43c0:	00000506 	br	43d8 <pwm+0xc4>
				case 5:IOWR_ALTERA_AVALON_PIO_DATA(PWM_5_BASE,pwm_rec);break;
    43c4:	68800035 	stwio	r2,0(r13)
    43c8:	00000306 	br	43d8 <pwm+0xc4>
				case 6:IOWR_ALTERA_AVALON_PIO_DATA(PWM_6_BASE,pwm_rec);break;
    43cc:	60800035 	stwio	r2,0(r12)
    43d0:	00000106 	br	43d8 <pwm+0xc4>
				case 7:IOWR_ALTERA_AVALON_PIO_DATA(PWM_7_BASE,pwm_rec);break;
    43d4:	58800035 	stwio	r2,0(r11)
	int *data_pwm = get_perc;// data in int form
	int i;//index
	int pwm_rec = 0x00;//hex form data

	// change the int data into HEX form and send to PIO
	for(i=0;i<8;i++){
    43d8:	29400044 	addi	r5,r5,1
    43dc:	21000104 	addi	r4,r4,4
    43e0:	29bfdd1e 	bne	r5,r6,4358 <_gp+0xffff6d44>
		else{

		};
		pwm_rec = 0x00;
	}
}
    43e4:	dfc00117 	ldw	ra,4(sp)
    43e8:	dc000017 	ldw	r16,0(sp)
    43ec:	dec00204 	addi	sp,sp,8
    43f0:	f800283a 	ret

000043f4 <uart_isr>:
	printf("\n");

}


static void uart_isr(){
    43f4:	0005883a 	mov	r2,zero


	// catching commands until received "enter"('\n')
	while(1){

		while(!((IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)&ALTERA_AVALON_UART_STATUS_RRDY_MSK)));
    43f8:	01240214 	movui	r4,36872

		rx_data = IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE);
    43fc:	01640014 	movui	r5,36864

		while(!((IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)&ALTERA_AVALON_UART_STATUS_TRDY_MSK)));

		if(rx_data == '\n'){
    4400:	01800284 	movi	r6,10


	// catching commands until received "enter"('\n')
	while(1){

		while(!((IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)&ALTERA_AVALON_UART_STATUS_RRDY_MSK)));
    4404:	20c00037 	ldwio	r3,0(r4)
    4408:	01e40214 	movui	r7,36872
    440c:	18c0200c 	andi	r3,r3,128
    4410:	183ffc26 	beq	r3,zero,4404 <_gp+0xffff6df0>

		rx_data = IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE);
    4414:	28c00037 	ldwio	r3,0(r5)
    4418:	d0e04205 	stb	r3,-32504(gp)

		while(!((IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)&ALTERA_AVALON_UART_STATUS_TRDY_MSK)));
    441c:	38c00037 	ldwio	r3,0(r7)
    4420:	18c0100c 	andi	r3,r3,64
    4424:	183ffd26 	beq	r3,zero,441c <_gp+0xffff6e08>

		if(rx_data == '\n'){
    4428:	d0e04203 	ldbu	r3,-32504(gp)
    442c:	19c03fcc 	andi	r7,r3,255
    4430:	39800326 	beq	r7,r6,4440 <uart_isr+0x4c>
			break;
		};
		// save commands characters
		save[z] = rx_data;
    4434:	10c00005 	stb	r3,0(r2)
    4438:	10800044 	addi	r2,r2,1

		z++;
	};
    443c:	003ff106 	br	4404 <_gp+0xffff6df0>

	// compare received command with true command with only first 3 characters
	int result_p = strncmp(cmd_pwm,save,3);
    4440:	01000034 	movhi	r4,0
	printf("\n");

}


static void uart_isr(){
    4444:	defff904 	addi	sp,sp,-28

		z++;
	};

	// compare received command with true command with only first 3 characters
	int result_p = strncmp(cmd_pwm,save,3);
    4448:	018000c4 	movi	r6,3
    444c:	000b883a 	mov	r5,zero
    4450:	21154704 	addi	r4,r4,21788
	printf("\n");

}


static void uart_isr(){
    4454:	dfc00615 	stw	ra,24(sp)
    4458:	dd400515 	stw	r21,20(sp)
    445c:	dd000415 	stw	r20,16(sp)
    4460:	dcc00315 	stw	r19,12(sp)
    4464:	dc800215 	stw	r18,8(sp)
    4468:	dc400115 	stw	r17,4(sp)
    446c:	dc000015 	stw	r16,0(sp)

		z++;
	};

	// compare received command with true command with only first 3 characters
	int result_p = strncmp(cmd_pwm,save,3);
    4470:	00047500 	call	4750 <strncmp>

	// if command is true, catching pwm data
	if(result_p == 0){
    4474:	1000271e 	bne	r2,zero,4514 <uart_isr+0x120>
    4478:	0009883a 	mov	r4,zero
    447c:	0023883a 	mov	r17,zero

		while(1){

			while(!((IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)&ALTERA_AVALON_UART_STATUS_RRDY_MSK)));
    4480:	04a40214 	movui	r18,36872

			rx_data = IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE);
    4484:	04e40014 	movui	r19,36864


			while(!((IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)&ALTERA_AVALON_UART_STATUS_TRDY_MSK)));
			// data is divided by space and all data is end with an "Enter"
			if(rx_data == '\n'){
    4488:	05000284 	movi	r20,10
				data_pwm[j] = cont;
				break;
			}
			else if(rx_data == 32){
    448c:	05400804 	movi	r21,32
	// if command is true, catching pwm data
	if(result_p == 0){

		while(1){

			while(!((IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)&ALTERA_AVALON_UART_STATUS_RRDY_MSK)));
    4490:	90800037 	ldwio	r2,0(r18)
    4494:	00e40214 	movui	r3,36872
    4498:	1080200c 	andi	r2,r2,128
    449c:	103ffc26 	beq	r2,zero,4490 <_gp+0xffff6e7c>

			rx_data = IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE);
    44a0:	98800037 	ldwio	r2,0(r19)
    44a4:	d0a04205 	stb	r2,-32504(gp)


			while(!((IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)&ALTERA_AVALON_UART_STATUS_TRDY_MSK)));
    44a8:	18800037 	ldwio	r2,0(r3)
    44ac:	1080100c 	andi	r2,r2,64
    44b0:	103ffd26 	beq	r2,zero,44a8 <_gp+0xffff6e94>
			// data is divided by space and all data is end with an "Enter"
			if(rx_data == '\n'){
    44b4:	d4204203 	ldbu	r16,-32504(gp)
    44b8:	85000a1e 	bne	r16,r20,44e4 <uart_isr+0xf0>
		};


		//send pwm data to the pwm execute function

		pwm(data_pwm);
    44bc:	0009883a 	mov	r4,zero
	}
	else{

	};

}
    44c0:	dfc00617 	ldw	ra,24(sp)
    44c4:	dd400517 	ldw	r21,20(sp)
    44c8:	dd000417 	ldw	r20,16(sp)
    44cc:	dcc00317 	ldw	r19,12(sp)
    44d0:	dc800217 	ldw	r18,8(sp)
    44d4:	dc400117 	ldw	r17,4(sp)
    44d8:	dc000017 	ldw	r16,0(sp)
    44dc:	dec00704 	addi	sp,sp,28
		};


		//send pwm data to the pwm execute function

		pwm(data_pwm);
    44e0:	00043141 	jmpi	4314 <pwm>
			// data is divided by space and all data is end with an "Enter"
			if(rx_data == '\n'){
				data_pwm[j] = cont;
				break;
			}
			else if(rx_data == 32){
    44e4:	8540061e 	bne	r16,r21,4500 <uart_isr+0x10c>
				data_pwm[j] = cont;
    44e8:	8c45883a 	add	r2,r17,r17
    44ec:	1085883a 	add	r2,r2,r2
    44f0:	11000015 	stw	r4,0(r2)
				j++;
    44f4:	8c400044 	addi	r17,r17,1
				cont = 0;
    44f8:	0009883a 	mov	r4,zero
    44fc:	003fe406 	br	4490 <_gp+0xffff6e7c>
			}
			else{
				//all received data is char, so using this to convert the data into real numbers
				cont = ((int)rx_data - 48) + cont * 10;
    4500:	01400284 	movi	r5,10
    4504:	00045cc0 	call	45cc <__mulsi3>
    4508:	843ff404 	addi	r16,r16,-48
    450c:	8089883a 	add	r4,r16,r2
    4510:	003fdf06 	br	4490 <_gp+0xffff6e7c>
	}
	else{

	};

}
    4514:	dfc00617 	ldw	ra,24(sp)
    4518:	dd400517 	ldw	r21,20(sp)
    451c:	dd000417 	ldw	r20,16(sp)
    4520:	dcc00317 	ldw	r19,12(sp)
    4524:	dc800217 	ldw	r18,8(sp)
    4528:	dc400117 	ldw	r17,4(sp)
    452c:	dc000017 	ldw	r16,0(sp)
    4530:	dec00704 	addi	sp,sp,28
    4534:	f800283a 	ret

00004538 <timer_init>:
		};
		pwm_rec = 0x00;
	}
}

void timer_init(){
    4538:	defffe04 	addi	sp,sp,-8
    453c:	dfc00115 	stw	ra,4(sp)
	//initialization of timer

	void* isr_context_ptr = (void*) &timer_isr_context;

	//set the period to 1 second
	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, 0x02FA);
    4540:	00a40b14 	movui	r2,36908
    4544:	00c0be84 	movi	r3,762
    4548:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, 0xF080);
    454c:	00a40a14 	movui	r2,36904
    4550:	00fc2014 	movui	r3,61568
    4554:	10c00035 	stwio	r3,0(r2)

	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE,
    4558:	00a40914 	movui	r2,36900
    455c:	00c001c4 	movi	r3,7
    4560:	10c00035 	stwio	r3,0(r2)
	ALTERA_AVALON_TIMER_CONTROL_START_MSK |
	ALTERA_AVALON_TIMER_CONTROL_CONT_MSK  |
	ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);

	//set the interrupt function
	alt_ic_isr_register(
    4564:	01800034 	movhi	r6,0
    4568:	d8000015 	stw	zero,0(sp)
    456c:	d1e04304 	addi	r7,gp,-32500
    4570:	31906f04 	addi	r6,r6,16828
    4574:	01400044 	movi	r5,1
    4578:	0009883a 	mov	r4,zero
    457c:	00050d40 	call	50d4 <alt_ic_isr_register>
	      TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID,
	      TIMER_0_IRQ,
	      freq_isr,
	      isr_context_ptr,
	      0x0);
}
    4580:	dfc00117 	ldw	ra,4(sp)
    4584:	dec00204 	addi	sp,sp,8
    4588:	f800283a 	ret

0000458c <main>:



int main(){
	printf("System Start \n");
    458c:	01000034 	movhi	r4,0
	      0x0);
}



int main(){
    4590:	deffff04 	addi	sp,sp,-4
	printf("System Start \n");
    4594:	21154804 	addi	r4,r4,21792
	      0x0);
}



int main(){
    4598:	dfc00015 	stw	ra,0(sp)
	printf("System Start \n");
    459c:	00047200 	call	4720 <puts>
	printf("***************** \n");
    45a0:	01000034 	movhi	r4,0
    45a4:	21154204 	addi	r4,r4,21768
    45a8:	00047200 	call	4720 <puts>
	uart_init();//uart initialization
    45ac:	00042d80 	call	42d8 <uart_init>
	timer_init();//timer intialization
    45b0:	00045380 	call	4538 <timer_init>
	alt_irq_register(UART_IRQ,NULL,uart_isr);//set uart interrupt monitor
    45b4:	01800034 	movhi	r6,0
    45b8:	3190fd04 	addi	r6,r6,17396
    45bc:	000b883a 	mov	r5,zero
    45c0:	0009883a 	mov	r4,zero
    45c4:	00051c80 	call	51c8 <alt_irq_register>
    45c8:	003fff06 	br	45c8 <_gp+0xffff6fb4>

000045cc <__mulsi3>:
    45cc:	0005883a 	mov	r2,zero
    45d0:	20000726 	beq	r4,zero,45f0 <__mulsi3+0x24>
    45d4:	20c0004c 	andi	r3,r4,1
    45d8:	2008d07a 	srli	r4,r4,1
    45dc:	18000126 	beq	r3,zero,45e4 <__mulsi3+0x18>
    45e0:	1145883a 	add	r2,r2,r5
    45e4:	294b883a 	add	r5,r5,r5
    45e8:	203ffa1e 	bne	r4,zero,45d4 <_gp+0xffff6fc0>
    45ec:	f800283a 	ret
    45f0:	f800283a 	ret

000045f4 <_printf_r>:
    45f4:	defffd04 	addi	sp,sp,-12
    45f8:	dfc00015 	stw	ra,0(sp)
    45fc:	d9800115 	stw	r6,4(sp)
    4600:	d9c00215 	stw	r7,8(sp)
    4604:	20c00217 	ldw	r3,8(r4)
    4608:	01800034 	movhi	r6,0
    460c:	31935904 	addi	r6,r6,19812
    4610:	19800115 	stw	r6,4(r3)
    4614:	280d883a 	mov	r6,r5
    4618:	21400217 	ldw	r5,8(r4)
    461c:	d9c00104 	addi	r7,sp,4
    4620:	000481c0 	call	481c <___vfprintf_internal_r>
    4624:	dfc00017 	ldw	ra,0(sp)
    4628:	dec00304 	addi	sp,sp,12
    462c:	f800283a 	ret

00004630 <printf>:
    4630:	defffc04 	addi	sp,sp,-16
    4634:	dfc00015 	stw	ra,0(sp)
    4638:	d9400115 	stw	r5,4(sp)
    463c:	d9800215 	stw	r6,8(sp)
    4640:	d9c00315 	stw	r7,12(sp)
    4644:	00800034 	movhi	r2,0
    4648:	10958604 	addi	r2,r2,22040
    464c:	10800017 	ldw	r2,0(r2)
    4650:	01400034 	movhi	r5,0
    4654:	29535904 	addi	r5,r5,19812
    4658:	10c00217 	ldw	r3,8(r2)
    465c:	d9800104 	addi	r6,sp,4
    4660:	19400115 	stw	r5,4(r3)
    4664:	200b883a 	mov	r5,r4
    4668:	11000217 	ldw	r4,8(r2)
    466c:	0004d480 	call	4d48 <__vfprintf_internal>
    4670:	dfc00017 	ldw	ra,0(sp)
    4674:	dec00404 	addi	sp,sp,16
    4678:	f800283a 	ret

0000467c <_putchar_r>:
    467c:	21800217 	ldw	r6,8(r4)
    4680:	0004e701 	jmpi	4e70 <_putc_r>

00004684 <putchar>:
    4684:	00800034 	movhi	r2,0
    4688:	10958604 	addi	r2,r2,22040
    468c:	10800017 	ldw	r2,0(r2)
    4690:	200b883a 	mov	r5,r4
    4694:	11800217 	ldw	r6,8(r2)
    4698:	1009883a 	mov	r4,r2
    469c:	0004e701 	jmpi	4e70 <_putc_r>

000046a0 <_puts_r>:
    46a0:	defffd04 	addi	sp,sp,-12
    46a4:	dc000015 	stw	r16,0(sp)
    46a8:	2021883a 	mov	r16,r4
    46ac:	2809883a 	mov	r4,r5
    46b0:	dfc00215 	stw	ra,8(sp)
    46b4:	dc400115 	stw	r17,4(sp)
    46b8:	2823883a 	mov	r17,r5
    46bc:	00047340 	call	4734 <strlen>
    46c0:	81400217 	ldw	r5,8(r16)
    46c4:	01000034 	movhi	r4,0
    46c8:	21135904 	addi	r4,r4,19812
    46cc:	29000115 	stw	r4,4(r5)
    46d0:	100f883a 	mov	r7,r2
    46d4:	880d883a 	mov	r6,r17
    46d8:	8009883a 	mov	r4,r16
    46dc:	0004d640 	call	4d64 <__sfvwrite_small_dev>
    46e0:	00ffffc4 	movi	r3,-1
    46e4:	10c00926 	beq	r2,r3,470c <_puts_r+0x6c>
    46e8:	81400217 	ldw	r5,8(r16)
    46ec:	01800034 	movhi	r6,0
    46f0:	01c00044 	movi	r7,1
    46f4:	28800117 	ldw	r2,4(r5)
    46f8:	31954c04 	addi	r6,r6,21808
    46fc:	8009883a 	mov	r4,r16
    4700:	103ee83a 	callr	r2
    4704:	10bfffe0 	cmpeqi	r2,r2,-1
    4708:	0085c83a 	sub	r2,zero,r2
    470c:	dfc00217 	ldw	ra,8(sp)
    4710:	dc400117 	ldw	r17,4(sp)
    4714:	dc000017 	ldw	r16,0(sp)
    4718:	dec00304 	addi	sp,sp,12
    471c:	f800283a 	ret

00004720 <puts>:
    4720:	00800034 	movhi	r2,0
    4724:	10958604 	addi	r2,r2,22040
    4728:	200b883a 	mov	r5,r4
    472c:	11000017 	ldw	r4,0(r2)
    4730:	00046a01 	jmpi	46a0 <_puts_r>

00004734 <strlen>:
    4734:	2005883a 	mov	r2,r4
    4738:	10c00007 	ldb	r3,0(r2)
    473c:	18000226 	beq	r3,zero,4748 <strlen+0x14>
    4740:	10800044 	addi	r2,r2,1
    4744:	003ffc06 	br	4738 <_gp+0xffff7124>
    4748:	1105c83a 	sub	r2,r2,r4
    474c:	f800283a 	ret

00004750 <strncmp>:
    4750:	30001526 	beq	r6,zero,47a8 <strncmp+0x58>
    4754:	31bfffc4 	addi	r6,r6,-1
    4758:	218d883a 	add	r6,r4,r6
    475c:	20800003 	ldbu	r2,0(r4)
    4760:	28c00003 	ldbu	r3,0(r5)
    4764:	11c03fcc 	andi	r7,r2,255
    4768:	1a003fcc 	andi	r8,r3,255
    476c:	39c0201c 	xori	r7,r7,128
    4770:	4200201c 	xori	r8,r8,128
    4774:	39ffe004 	addi	r7,r7,-128
    4778:	423fe004 	addi	r8,r8,-128
    477c:	3a00061e 	bne	r7,r8,4798 <strncmp+0x48>
    4780:	21800426 	beq	r4,r6,4794 <strncmp+0x44>
    4784:	38000326 	beq	r7,zero,4794 <strncmp+0x44>
    4788:	21000044 	addi	r4,r4,1
    478c:	29400044 	addi	r5,r5,1
    4790:	003ff206 	br	475c <_gp+0xffff7148>
    4794:	1007883a 	mov	r3,r2
    4798:	18c03fcc 	andi	r3,r3,255
    479c:	10803fcc 	andi	r2,r2,255
    47a0:	10c5c83a 	sub	r2,r2,r3
    47a4:	f800283a 	ret
    47a8:	0005883a 	mov	r2,zero
    47ac:	f800283a 	ret

000047b0 <print_repeat>:
    47b0:	defffb04 	addi	sp,sp,-20
    47b4:	dc800315 	stw	r18,12(sp)
    47b8:	dc400215 	stw	r17,8(sp)
    47bc:	dc000115 	stw	r16,4(sp)
    47c0:	dfc00415 	stw	ra,16(sp)
    47c4:	2025883a 	mov	r18,r4
    47c8:	2823883a 	mov	r17,r5
    47cc:	d9800005 	stb	r6,0(sp)
    47d0:	3821883a 	mov	r16,r7
    47d4:	04000a0e 	bge	zero,r16,4800 <print_repeat+0x50>
    47d8:	88800117 	ldw	r2,4(r17)
    47dc:	01c00044 	movi	r7,1
    47e0:	d80d883a 	mov	r6,sp
    47e4:	880b883a 	mov	r5,r17
    47e8:	9009883a 	mov	r4,r18
    47ec:	103ee83a 	callr	r2
    47f0:	843fffc4 	addi	r16,r16,-1
    47f4:	103ff726 	beq	r2,zero,47d4 <_gp+0xffff71c0>
    47f8:	00bfffc4 	movi	r2,-1
    47fc:	00000106 	br	4804 <print_repeat+0x54>
    4800:	0005883a 	mov	r2,zero
    4804:	dfc00417 	ldw	ra,16(sp)
    4808:	dc800317 	ldw	r18,12(sp)
    480c:	dc400217 	ldw	r17,8(sp)
    4810:	dc000117 	ldw	r16,4(sp)
    4814:	dec00504 	addi	sp,sp,20
    4818:	f800283a 	ret

0000481c <___vfprintf_internal_r>:
    481c:	deffe504 	addi	sp,sp,-108
    4820:	d8c00804 	addi	r3,sp,32
    4824:	ddc01815 	stw	r23,96(sp)
    4828:	dd801715 	stw	r22,92(sp)
    482c:	dd401615 	stw	r21,88(sp)
    4830:	dd001515 	stw	r20,84(sp)
    4834:	dcc01415 	stw	r19,80(sp)
    4838:	dc801315 	stw	r18,76(sp)
    483c:	dc401215 	stw	r17,72(sp)
    4840:	dc001115 	stw	r16,68(sp)
    4844:	dfc01a15 	stw	ra,104(sp)
    4848:	df001915 	stw	fp,100(sp)
    484c:	2029883a 	mov	r20,r4
    4850:	2823883a 	mov	r17,r5
    4854:	382d883a 	mov	r22,r7
    4858:	d9800f15 	stw	r6,60(sp)
    485c:	0021883a 	mov	r16,zero
    4860:	d8000e15 	stw	zero,56(sp)
    4864:	d8000a15 	stw	zero,40(sp)
    4868:	002b883a 	mov	r21,zero
    486c:	0027883a 	mov	r19,zero
    4870:	0025883a 	mov	r18,zero
    4874:	d8000c15 	stw	zero,48(sp)
    4878:	d8000b15 	stw	zero,44(sp)
    487c:	002f883a 	mov	r23,zero
    4880:	d8c00915 	stw	r3,36(sp)
    4884:	d8c00f17 	ldw	r3,60(sp)
    4888:	19000003 	ldbu	r4,0(r3)
    488c:	20803fcc 	andi	r2,r4,255
    4890:	1080201c 	xori	r2,r2,128
    4894:	10bfe004 	addi	r2,r2,-128
    4898:	10011e26 	beq	r2,zero,4d14 <___vfprintf_internal_r+0x4f8>
    489c:	00c00044 	movi	r3,1
    48a0:	b8c01426 	beq	r23,r3,48f4 <___vfprintf_internal_r+0xd8>
    48a4:	1dc00216 	blt	r3,r23,48b0 <___vfprintf_internal_r+0x94>
    48a8:	b8000626 	beq	r23,zero,48c4 <___vfprintf_internal_r+0xa8>
    48ac:	00011506 	br	4d04 <___vfprintf_internal_r+0x4e8>
    48b0:	01400084 	movi	r5,2
    48b4:	b9401d26 	beq	r23,r5,492c <___vfprintf_internal_r+0x110>
    48b8:	014000c4 	movi	r5,3
    48bc:	b9402b26 	beq	r23,r5,496c <___vfprintf_internal_r+0x150>
    48c0:	00011006 	br	4d04 <___vfprintf_internal_r+0x4e8>
    48c4:	01400944 	movi	r5,37
    48c8:	1140fc26 	beq	r2,r5,4cbc <___vfprintf_internal_r+0x4a0>
    48cc:	88800117 	ldw	r2,4(r17)
    48d0:	d9000005 	stb	r4,0(sp)
    48d4:	01c00044 	movi	r7,1
    48d8:	d80d883a 	mov	r6,sp
    48dc:	880b883a 	mov	r5,r17
    48e0:	a009883a 	mov	r4,r20
    48e4:	103ee83a 	callr	r2
    48e8:	1000d81e 	bne	r2,zero,4c4c <___vfprintf_internal_r+0x430>
    48ec:	84000044 	addi	r16,r16,1
    48f0:	00010406 	br	4d04 <___vfprintf_internal_r+0x4e8>
    48f4:	01400c04 	movi	r5,48
    48f8:	1140fa26 	beq	r2,r5,4ce4 <___vfprintf_internal_r+0x4c8>
    48fc:	01400944 	movi	r5,37
    4900:	11400a1e 	bne	r2,r5,492c <___vfprintf_internal_r+0x110>
    4904:	d8800005 	stb	r2,0(sp)
    4908:	88800117 	ldw	r2,4(r17)
    490c:	b80f883a 	mov	r7,r23
    4910:	d80d883a 	mov	r6,sp
    4914:	880b883a 	mov	r5,r17
    4918:	a009883a 	mov	r4,r20
    491c:	103ee83a 	callr	r2
    4920:	1000ca1e 	bne	r2,zero,4c4c <___vfprintf_internal_r+0x430>
    4924:	84000044 	addi	r16,r16,1
    4928:	0000f506 	br	4d00 <___vfprintf_internal_r+0x4e4>
    492c:	25fff404 	addi	r23,r4,-48
    4930:	bdc03fcc 	andi	r23,r23,255
    4934:	00c00244 	movi	r3,9
    4938:	1dc00936 	bltu	r3,r23,4960 <___vfprintf_internal_r+0x144>
    493c:	00bfffc4 	movi	r2,-1
    4940:	90800426 	beq	r18,r2,4954 <___vfprintf_internal_r+0x138>
    4944:	01400284 	movi	r5,10
    4948:	9009883a 	mov	r4,r18
    494c:	00045cc0 	call	45cc <__mulsi3>
    4950:	00000106 	br	4958 <___vfprintf_internal_r+0x13c>
    4954:	0005883a 	mov	r2,zero
    4958:	b8a5883a 	add	r18,r23,r2
    495c:	0000e206 	br	4ce8 <___vfprintf_internal_r+0x4cc>
    4960:	01400b84 	movi	r5,46
    4964:	1140e426 	beq	r2,r5,4cf8 <___vfprintf_internal_r+0x4dc>
    4968:	05c00084 	movi	r23,2
    496c:	213ff404 	addi	r4,r4,-48
    4970:	27003fcc 	andi	fp,r4,255
    4974:	00c00244 	movi	r3,9
    4978:	1f000936 	bltu	r3,fp,49a0 <___vfprintf_internal_r+0x184>
    497c:	00bfffc4 	movi	r2,-1
    4980:	98800426 	beq	r19,r2,4994 <___vfprintf_internal_r+0x178>
    4984:	01400284 	movi	r5,10
    4988:	9809883a 	mov	r4,r19
    498c:	00045cc0 	call	45cc <__mulsi3>
    4990:	00000106 	br	4998 <___vfprintf_internal_r+0x17c>
    4994:	0005883a 	mov	r2,zero
    4998:	e0a7883a 	add	r19,fp,r2
    499c:	0000d906 	br	4d04 <___vfprintf_internal_r+0x4e8>
    49a0:	00c01b04 	movi	r3,108
    49a4:	10c0d226 	beq	r2,r3,4cf0 <___vfprintf_internal_r+0x4d4>
    49a8:	013fffc4 	movi	r4,-1
    49ac:	99000226 	beq	r19,r4,49b8 <___vfprintf_internal_r+0x19c>
    49b0:	d8000b15 	stw	zero,44(sp)
    49b4:	00000106 	br	49bc <___vfprintf_internal_r+0x1a0>
    49b8:	04c00044 	movi	r19,1
    49bc:	01001a44 	movi	r4,105
    49c0:	11001626 	beq	r2,r4,4a1c <___vfprintf_internal_r+0x200>
    49c4:	20800916 	blt	r4,r2,49ec <___vfprintf_internal_r+0x1d0>
    49c8:	010018c4 	movi	r4,99
    49cc:	11008826 	beq	r2,r4,4bf0 <___vfprintf_internal_r+0x3d4>
    49d0:	01001904 	movi	r4,100
    49d4:	11001126 	beq	r2,r4,4a1c <___vfprintf_internal_r+0x200>
    49d8:	01001604 	movi	r4,88
    49dc:	1100c81e 	bne	r2,r4,4d00 <___vfprintf_internal_r+0x4e4>
    49e0:	00c00044 	movi	r3,1
    49e4:	d8c00e15 	stw	r3,56(sp)
    49e8:	00001506 	br	4a40 <___vfprintf_internal_r+0x224>
    49ec:	01001cc4 	movi	r4,115
    49f0:	11009826 	beq	r2,r4,4c54 <___vfprintf_internal_r+0x438>
    49f4:	20800416 	blt	r4,r2,4a08 <___vfprintf_internal_r+0x1ec>
    49f8:	01001bc4 	movi	r4,111
    49fc:	1100c01e 	bne	r2,r4,4d00 <___vfprintf_internal_r+0x4e4>
    4a00:	05400204 	movi	r21,8
    4a04:	00000f06 	br	4a44 <___vfprintf_internal_r+0x228>
    4a08:	01001d44 	movi	r4,117
    4a0c:	11000d26 	beq	r2,r4,4a44 <___vfprintf_internal_r+0x228>
    4a10:	01001e04 	movi	r4,120
    4a14:	11000a26 	beq	r2,r4,4a40 <___vfprintf_internal_r+0x224>
    4a18:	0000b906 	br	4d00 <___vfprintf_internal_r+0x4e4>
    4a1c:	d8c00a17 	ldw	r3,40(sp)
    4a20:	b7000104 	addi	fp,r22,4
    4a24:	18000726 	beq	r3,zero,4a44 <___vfprintf_internal_r+0x228>
    4a28:	df000d15 	stw	fp,52(sp)
    4a2c:	b5c00017 	ldw	r23,0(r22)
    4a30:	b800080e 	bge	r23,zero,4a54 <___vfprintf_internal_r+0x238>
    4a34:	05efc83a 	sub	r23,zero,r23
    4a38:	02400044 	movi	r9,1
    4a3c:	00000606 	br	4a58 <___vfprintf_internal_r+0x23c>
    4a40:	05400404 	movi	r21,16
    4a44:	b0c00104 	addi	r3,r22,4
    4a48:	d8c00d15 	stw	r3,52(sp)
    4a4c:	b5c00017 	ldw	r23,0(r22)
    4a50:	d8000a15 	stw	zero,40(sp)
    4a54:	0013883a 	mov	r9,zero
    4a58:	d839883a 	mov	fp,sp
    4a5c:	b8001726 	beq	r23,zero,4abc <___vfprintf_internal_r+0x2a0>
    4a60:	a80b883a 	mov	r5,r21
    4a64:	b809883a 	mov	r4,r23
    4a68:	da401015 	stw	r9,64(sp)
    4a6c:	00050180 	call	5018 <__udivsi3>
    4a70:	a80b883a 	mov	r5,r21
    4a74:	1009883a 	mov	r4,r2
    4a78:	102d883a 	mov	r22,r2
    4a7c:	00045cc0 	call	45cc <__mulsi3>
    4a80:	b885c83a 	sub	r2,r23,r2
    4a84:	00c00244 	movi	r3,9
    4a88:	da401017 	ldw	r9,64(sp)
    4a8c:	18800216 	blt	r3,r2,4a98 <___vfprintf_internal_r+0x27c>
    4a90:	10800c04 	addi	r2,r2,48
    4a94:	00000506 	br	4aac <___vfprintf_internal_r+0x290>
    4a98:	d8c00e17 	ldw	r3,56(sp)
    4a9c:	18000226 	beq	r3,zero,4aa8 <___vfprintf_internal_r+0x28c>
    4aa0:	10800dc4 	addi	r2,r2,55
    4aa4:	00000106 	br	4aac <___vfprintf_internal_r+0x290>
    4aa8:	108015c4 	addi	r2,r2,87
    4aac:	e0800005 	stb	r2,0(fp)
    4ab0:	b02f883a 	mov	r23,r22
    4ab4:	e7000044 	addi	fp,fp,1
    4ab8:	003fe806 	br	4a5c <_gp+0xffff7448>
    4abc:	e6efc83a 	sub	r23,fp,sp
    4ac0:	9dc5c83a 	sub	r2,r19,r23
    4ac4:	0080090e 	bge	zero,r2,4aec <___vfprintf_internal_r+0x2d0>
    4ac8:	e085883a 	add	r2,fp,r2
    4acc:	01400c04 	movi	r5,48
    4ad0:	d8c00917 	ldw	r3,36(sp)
    4ad4:	e009883a 	mov	r4,fp
    4ad8:	e0c0032e 	bgeu	fp,r3,4ae8 <___vfprintf_internal_r+0x2cc>
    4adc:	e7000044 	addi	fp,fp,1
    4ae0:	21400005 	stb	r5,0(r4)
    4ae4:	e0bffa1e 	bne	fp,r2,4ad0 <_gp+0xffff74bc>
    4ae8:	e6efc83a 	sub	r23,fp,sp
    4aec:	d8c00b17 	ldw	r3,44(sp)
    4af0:	4dd1883a 	add	r8,r9,r23
    4af4:	922dc83a 	sub	r22,r18,r8
    4af8:	18001626 	beq	r3,zero,4b54 <___vfprintf_internal_r+0x338>
    4afc:	48000a26 	beq	r9,zero,4b28 <___vfprintf_internal_r+0x30c>
    4b00:	00800b44 	movi	r2,45
    4b04:	d8800805 	stb	r2,32(sp)
    4b08:	88800117 	ldw	r2,4(r17)
    4b0c:	01c00044 	movi	r7,1
    4b10:	d9800804 	addi	r6,sp,32
    4b14:	880b883a 	mov	r5,r17
    4b18:	a009883a 	mov	r4,r20
    4b1c:	103ee83a 	callr	r2
    4b20:	10004a1e 	bne	r2,zero,4c4c <___vfprintf_internal_r+0x430>
    4b24:	84000044 	addi	r16,r16,1
    4b28:	0580070e 	bge	zero,r22,4b48 <___vfprintf_internal_r+0x32c>
    4b2c:	b00f883a 	mov	r7,r22
    4b30:	01800c04 	movi	r6,48
    4b34:	880b883a 	mov	r5,r17
    4b38:	a009883a 	mov	r4,r20
    4b3c:	00047b00 	call	47b0 <print_repeat>
    4b40:	1000421e 	bne	r2,zero,4c4c <___vfprintf_internal_r+0x430>
    4b44:	85a1883a 	add	r16,r16,r22
    4b48:	e02d883a 	mov	r22,fp
    4b4c:	bf2fc83a 	sub	r23,r23,fp
    4b50:	00002006 	br	4bd4 <___vfprintf_internal_r+0x3b8>
    4b54:	0580090e 	bge	zero,r22,4b7c <___vfprintf_internal_r+0x360>
    4b58:	b00f883a 	mov	r7,r22
    4b5c:	01800804 	movi	r6,32
    4b60:	880b883a 	mov	r5,r17
    4b64:	a009883a 	mov	r4,r20
    4b68:	da401015 	stw	r9,64(sp)
    4b6c:	00047b00 	call	47b0 <print_repeat>
    4b70:	da401017 	ldw	r9,64(sp)
    4b74:	1000351e 	bne	r2,zero,4c4c <___vfprintf_internal_r+0x430>
    4b78:	85a1883a 	add	r16,r16,r22
    4b7c:	483ff226 	beq	r9,zero,4b48 <_gp+0xffff7534>
    4b80:	00800b44 	movi	r2,45
    4b84:	d8800805 	stb	r2,32(sp)
    4b88:	88800117 	ldw	r2,4(r17)
    4b8c:	01c00044 	movi	r7,1
    4b90:	d9800804 	addi	r6,sp,32
    4b94:	880b883a 	mov	r5,r17
    4b98:	a009883a 	mov	r4,r20
    4b9c:	103ee83a 	callr	r2
    4ba0:	10002a1e 	bne	r2,zero,4c4c <___vfprintf_internal_r+0x430>
    4ba4:	84000044 	addi	r16,r16,1
    4ba8:	003fe706 	br	4b48 <_gp+0xffff7534>
    4bac:	b5bfffc4 	addi	r22,r22,-1
    4bb0:	b0800003 	ldbu	r2,0(r22)
    4bb4:	01c00044 	movi	r7,1
    4bb8:	d9800804 	addi	r6,sp,32
    4bbc:	d8800805 	stb	r2,32(sp)
    4bc0:	88800117 	ldw	r2,4(r17)
    4bc4:	880b883a 	mov	r5,r17
    4bc8:	a009883a 	mov	r4,r20
    4bcc:	103ee83a 	callr	r2
    4bd0:	10001e1e 	bne	r2,zero,4c4c <___vfprintf_internal_r+0x430>
    4bd4:	8585c83a 	sub	r2,r16,r22
    4bd8:	b5c9883a 	add	r4,r22,r23
    4bdc:	e085883a 	add	r2,fp,r2
    4be0:	013ff216 	blt	zero,r4,4bac <_gp+0xffff7598>
    4be4:	1021883a 	mov	r16,r2
    4be8:	dd800d17 	ldw	r22,52(sp)
    4bec:	00004406 	br	4d00 <___vfprintf_internal_r+0x4e4>
    4bf0:	00800044 	movi	r2,1
    4bf4:	1480080e 	bge	r2,r18,4c18 <___vfprintf_internal_r+0x3fc>
    4bf8:	95ffffc4 	addi	r23,r18,-1
    4bfc:	b80f883a 	mov	r7,r23
    4c00:	01800804 	movi	r6,32
    4c04:	880b883a 	mov	r5,r17
    4c08:	a009883a 	mov	r4,r20
    4c0c:	00047b00 	call	47b0 <print_repeat>
    4c10:	10000e1e 	bne	r2,zero,4c4c <___vfprintf_internal_r+0x430>
    4c14:	85e1883a 	add	r16,r16,r23
    4c18:	b0800017 	ldw	r2,0(r22)
    4c1c:	01c00044 	movi	r7,1
    4c20:	d80d883a 	mov	r6,sp
    4c24:	d8800005 	stb	r2,0(sp)
    4c28:	88800117 	ldw	r2,4(r17)
    4c2c:	880b883a 	mov	r5,r17
    4c30:	a009883a 	mov	r4,r20
    4c34:	b5c00104 	addi	r23,r22,4
    4c38:	103ee83a 	callr	r2
    4c3c:	1000031e 	bne	r2,zero,4c4c <___vfprintf_internal_r+0x430>
    4c40:	84000044 	addi	r16,r16,1
    4c44:	b82d883a 	mov	r22,r23
    4c48:	00002d06 	br	4d00 <___vfprintf_internal_r+0x4e4>
    4c4c:	00bfffc4 	movi	r2,-1
    4c50:	00003106 	br	4d18 <___vfprintf_internal_r+0x4fc>
    4c54:	b5c00017 	ldw	r23,0(r22)
    4c58:	b7000104 	addi	fp,r22,4
    4c5c:	b809883a 	mov	r4,r23
    4c60:	00047340 	call	4734 <strlen>
    4c64:	9091c83a 	sub	r8,r18,r2
    4c68:	102d883a 	mov	r22,r2
    4c6c:	0200090e 	bge	zero,r8,4c94 <___vfprintf_internal_r+0x478>
    4c70:	400f883a 	mov	r7,r8
    4c74:	01800804 	movi	r6,32
    4c78:	880b883a 	mov	r5,r17
    4c7c:	a009883a 	mov	r4,r20
    4c80:	da001015 	stw	r8,64(sp)
    4c84:	00047b00 	call	47b0 <print_repeat>
    4c88:	da001017 	ldw	r8,64(sp)
    4c8c:	103fef1e 	bne	r2,zero,4c4c <_gp+0xffff7638>
    4c90:	8221883a 	add	r16,r16,r8
    4c94:	88800117 	ldw	r2,4(r17)
    4c98:	b00f883a 	mov	r7,r22
    4c9c:	b80d883a 	mov	r6,r23
    4ca0:	880b883a 	mov	r5,r17
    4ca4:	a009883a 	mov	r4,r20
    4ca8:	103ee83a 	callr	r2
    4cac:	103fe71e 	bne	r2,zero,4c4c <_gp+0xffff7638>
    4cb0:	85a1883a 	add	r16,r16,r22
    4cb4:	e02d883a 	mov	r22,fp
    4cb8:	00001106 	br	4d00 <___vfprintf_internal_r+0x4e4>
    4cbc:	00c00044 	movi	r3,1
    4cc0:	04ffffc4 	movi	r19,-1
    4cc4:	d8000e15 	stw	zero,56(sp)
    4cc8:	d8c00a15 	stw	r3,40(sp)
    4ccc:	05400284 	movi	r21,10
    4cd0:	9825883a 	mov	r18,r19
    4cd4:	d8000c15 	stw	zero,48(sp)
    4cd8:	d8000b15 	stw	zero,44(sp)
    4cdc:	182f883a 	mov	r23,r3
    4ce0:	00000806 	br	4d04 <___vfprintf_internal_r+0x4e8>
    4ce4:	ddc00b15 	stw	r23,44(sp)
    4ce8:	05c00084 	movi	r23,2
    4cec:	00000506 	br	4d04 <___vfprintf_internal_r+0x4e8>
    4cf0:	00c00044 	movi	r3,1
    4cf4:	d8c00c15 	stw	r3,48(sp)
    4cf8:	05c000c4 	movi	r23,3
    4cfc:	00000106 	br	4d04 <___vfprintf_internal_r+0x4e8>
    4d00:	002f883a 	mov	r23,zero
    4d04:	d8c00f17 	ldw	r3,60(sp)
    4d08:	18c00044 	addi	r3,r3,1
    4d0c:	d8c00f15 	stw	r3,60(sp)
    4d10:	003edc06 	br	4884 <_gp+0xffff7270>
    4d14:	8005883a 	mov	r2,r16
    4d18:	dfc01a17 	ldw	ra,104(sp)
    4d1c:	df001917 	ldw	fp,100(sp)
    4d20:	ddc01817 	ldw	r23,96(sp)
    4d24:	dd801717 	ldw	r22,92(sp)
    4d28:	dd401617 	ldw	r21,88(sp)
    4d2c:	dd001517 	ldw	r20,84(sp)
    4d30:	dcc01417 	ldw	r19,80(sp)
    4d34:	dc801317 	ldw	r18,76(sp)
    4d38:	dc401217 	ldw	r17,72(sp)
    4d3c:	dc001117 	ldw	r16,68(sp)
    4d40:	dec01b04 	addi	sp,sp,108
    4d44:	f800283a 	ret

00004d48 <__vfprintf_internal>:
    4d48:	00800034 	movhi	r2,0
    4d4c:	10958604 	addi	r2,r2,22040
    4d50:	300f883a 	mov	r7,r6
    4d54:	280d883a 	mov	r6,r5
    4d58:	200b883a 	mov	r5,r4
    4d5c:	11000017 	ldw	r4,0(r2)
    4d60:	000481c1 	jmpi	481c <___vfprintf_internal_r>

00004d64 <__sfvwrite_small_dev>:
    4d64:	2880000b 	ldhu	r2,0(r5)
    4d68:	1080020c 	andi	r2,r2,8
    4d6c:	10002126 	beq	r2,zero,4df4 <__sfvwrite_small_dev+0x90>
    4d70:	2880008f 	ldh	r2,2(r5)
    4d74:	defffa04 	addi	sp,sp,-24
    4d78:	dc000015 	stw	r16,0(sp)
    4d7c:	dfc00515 	stw	ra,20(sp)
    4d80:	dd000415 	stw	r20,16(sp)
    4d84:	dcc00315 	stw	r19,12(sp)
    4d88:	dc800215 	stw	r18,8(sp)
    4d8c:	dc400115 	stw	r17,4(sp)
    4d90:	2821883a 	mov	r16,r5
    4d94:	10001216 	blt	r2,zero,4de0 <__sfvwrite_small_dev+0x7c>
    4d98:	2027883a 	mov	r19,r4
    4d9c:	3025883a 	mov	r18,r6
    4da0:	3823883a 	mov	r17,r7
    4da4:	05010004 	movi	r20,1024
    4da8:	04400b0e 	bge	zero,r17,4dd8 <__sfvwrite_small_dev+0x74>
    4dac:	880f883a 	mov	r7,r17
    4db0:	a440010e 	bge	r20,r17,4db8 <__sfvwrite_small_dev+0x54>
    4db4:	01c10004 	movi	r7,1024
    4db8:	8140008f 	ldh	r5,2(r16)
    4dbc:	900d883a 	mov	r6,r18
    4dc0:	9809883a 	mov	r4,r19
    4dc4:	0004ec80 	call	4ec8 <_write_r>
    4dc8:	0080050e 	bge	zero,r2,4de0 <__sfvwrite_small_dev+0x7c>
    4dcc:	88a3c83a 	sub	r17,r17,r2
    4dd0:	90a5883a 	add	r18,r18,r2
    4dd4:	003ff406 	br	4da8 <_gp+0xffff7794>
    4dd8:	0005883a 	mov	r2,zero
    4ddc:	00000706 	br	4dfc <__sfvwrite_small_dev+0x98>
    4de0:	8080000b 	ldhu	r2,0(r16)
    4de4:	10801014 	ori	r2,r2,64
    4de8:	8080000d 	sth	r2,0(r16)
    4dec:	00bfffc4 	movi	r2,-1
    4df0:	00000206 	br	4dfc <__sfvwrite_small_dev+0x98>
    4df4:	00bfffc4 	movi	r2,-1
    4df8:	f800283a 	ret
    4dfc:	dfc00517 	ldw	ra,20(sp)
    4e00:	dd000417 	ldw	r20,16(sp)
    4e04:	dcc00317 	ldw	r19,12(sp)
    4e08:	dc800217 	ldw	r18,8(sp)
    4e0c:	dc400117 	ldw	r17,4(sp)
    4e10:	dc000017 	ldw	r16,0(sp)
    4e14:	dec00604 	addi	sp,sp,24
    4e18:	f800283a 	ret

00004e1c <putc>:
    4e1c:	defffd04 	addi	sp,sp,-12
    4e20:	00800034 	movhi	r2,0
    4e24:	dc000115 	stw	r16,4(sp)
    4e28:	dfc00215 	stw	ra,8(sp)
    4e2c:	10935904 	addi	r2,r2,19812
    4e30:	28800115 	stw	r2,4(r5)
    4e34:	00800034 	movhi	r2,0
    4e38:	10958604 	addi	r2,r2,22040
    4e3c:	d9000005 	stb	r4,0(sp)
    4e40:	2021883a 	mov	r16,r4
    4e44:	11000017 	ldw	r4,0(r2)
    4e48:	01c00044 	movi	r7,1
    4e4c:	d80d883a 	mov	r6,sp
    4e50:	0004d640 	call	4d64 <__sfvwrite_small_dev>
    4e54:	00ffffc4 	movi	r3,-1
    4e58:	10c00126 	beq	r2,r3,4e60 <putc+0x44>
    4e5c:	8005883a 	mov	r2,r16
    4e60:	dfc00217 	ldw	ra,8(sp)
    4e64:	dc000117 	ldw	r16,4(sp)
    4e68:	dec00304 	addi	sp,sp,12
    4e6c:	f800283a 	ret

00004e70 <_putc_r>:
    4e70:	defffd04 	addi	sp,sp,-12
    4e74:	00800034 	movhi	r2,0
    4e78:	dc000115 	stw	r16,4(sp)
    4e7c:	dfc00215 	stw	ra,8(sp)
    4e80:	10935904 	addi	r2,r2,19812
    4e84:	30800115 	stw	r2,4(r6)
    4e88:	00800034 	movhi	r2,0
    4e8c:	10958604 	addi	r2,r2,22040
    4e90:	11000017 	ldw	r4,0(r2)
    4e94:	2821883a 	mov	r16,r5
    4e98:	01c00044 	movi	r7,1
    4e9c:	300b883a 	mov	r5,r6
    4ea0:	d80d883a 	mov	r6,sp
    4ea4:	dc000005 	stb	r16,0(sp)
    4ea8:	0004d640 	call	4d64 <__sfvwrite_small_dev>
    4eac:	00ffffc4 	movi	r3,-1
    4eb0:	10c00126 	beq	r2,r3,4eb8 <_putc_r+0x48>
    4eb4:	8005883a 	mov	r2,r16
    4eb8:	dfc00217 	ldw	ra,8(sp)
    4ebc:	dc000117 	ldw	r16,4(sp)
    4ec0:	dec00304 	addi	sp,sp,12
    4ec4:	f800283a 	ret

00004ec8 <_write_r>:
    4ec8:	defffd04 	addi	sp,sp,-12
    4ecc:	dc000015 	stw	r16,0(sp)
    4ed0:	04000034 	movhi	r16,0
    4ed4:	dc400115 	stw	r17,4(sp)
    4ed8:	8415c904 	addi	r16,r16,22308
    4edc:	2023883a 	mov	r17,r4
    4ee0:	2809883a 	mov	r4,r5
    4ee4:	300b883a 	mov	r5,r6
    4ee8:	380d883a 	mov	r6,r7
    4eec:	dfc00215 	stw	ra,8(sp)
    4ef0:	80000015 	stw	zero,0(r16)
    4ef4:	00053680 	call	5368 <write>
    4ef8:	00ffffc4 	movi	r3,-1
    4efc:	10c0031e 	bne	r2,r3,4f0c <_write_r+0x44>
    4f00:	80c00017 	ldw	r3,0(r16)
    4f04:	18000126 	beq	r3,zero,4f0c <_write_r+0x44>
    4f08:	88c00015 	stw	r3,0(r17)
    4f0c:	dfc00217 	ldw	ra,8(sp)
    4f10:	dc400117 	ldw	r17,4(sp)
    4f14:	dc000017 	ldw	r16,0(sp)
    4f18:	dec00304 	addi	sp,sp,12
    4f1c:	f800283a 	ret

00004f20 <__divsi3>:
    4f20:	20001b16 	blt	r4,zero,4f90 <__divsi3+0x70>
    4f24:	000f883a 	mov	r7,zero
    4f28:	28001616 	blt	r5,zero,4f84 <__divsi3+0x64>
    4f2c:	200d883a 	mov	r6,r4
    4f30:	29001a2e 	bgeu	r5,r4,4f9c <__divsi3+0x7c>
    4f34:	00800804 	movi	r2,32
    4f38:	00c00044 	movi	r3,1
    4f3c:	00000106 	br	4f44 <__divsi3+0x24>
    4f40:	10000d26 	beq	r2,zero,4f78 <__divsi3+0x58>
    4f44:	294b883a 	add	r5,r5,r5
    4f48:	10bfffc4 	addi	r2,r2,-1
    4f4c:	18c7883a 	add	r3,r3,r3
    4f50:	293ffb36 	bltu	r5,r4,4f40 <_gp+0xffff792c>
    4f54:	0005883a 	mov	r2,zero
    4f58:	18000726 	beq	r3,zero,4f78 <__divsi3+0x58>
    4f5c:	0005883a 	mov	r2,zero
    4f60:	31400236 	bltu	r6,r5,4f6c <__divsi3+0x4c>
    4f64:	314dc83a 	sub	r6,r6,r5
    4f68:	10c4b03a 	or	r2,r2,r3
    4f6c:	1806d07a 	srli	r3,r3,1
    4f70:	280ad07a 	srli	r5,r5,1
    4f74:	183ffa1e 	bne	r3,zero,4f60 <_gp+0xffff794c>
    4f78:	38000126 	beq	r7,zero,4f80 <__divsi3+0x60>
    4f7c:	0085c83a 	sub	r2,zero,r2
    4f80:	f800283a 	ret
    4f84:	014bc83a 	sub	r5,zero,r5
    4f88:	39c0005c 	xori	r7,r7,1
    4f8c:	003fe706 	br	4f2c <_gp+0xffff7918>
    4f90:	0109c83a 	sub	r4,zero,r4
    4f94:	01c00044 	movi	r7,1
    4f98:	003fe306 	br	4f28 <_gp+0xffff7914>
    4f9c:	00c00044 	movi	r3,1
    4fa0:	003fee06 	br	4f5c <_gp+0xffff7948>

00004fa4 <__modsi3>:
    4fa4:	20001716 	blt	r4,zero,5004 <__modsi3+0x60>
    4fa8:	000f883a 	mov	r7,zero
    4fac:	2005883a 	mov	r2,r4
    4fb0:	28001216 	blt	r5,zero,4ffc <__modsi3+0x58>
    4fb4:	2900162e 	bgeu	r5,r4,5010 <__modsi3+0x6c>
    4fb8:	01800804 	movi	r6,32
    4fbc:	00c00044 	movi	r3,1
    4fc0:	00000106 	br	4fc8 <__modsi3+0x24>
    4fc4:	30000a26 	beq	r6,zero,4ff0 <__modsi3+0x4c>
    4fc8:	294b883a 	add	r5,r5,r5
    4fcc:	31bfffc4 	addi	r6,r6,-1
    4fd0:	18c7883a 	add	r3,r3,r3
    4fd4:	293ffb36 	bltu	r5,r4,4fc4 <_gp+0xffff79b0>
    4fd8:	18000526 	beq	r3,zero,4ff0 <__modsi3+0x4c>
    4fdc:	1806d07a 	srli	r3,r3,1
    4fe0:	11400136 	bltu	r2,r5,4fe8 <__modsi3+0x44>
    4fe4:	1145c83a 	sub	r2,r2,r5
    4fe8:	280ad07a 	srli	r5,r5,1
    4fec:	183ffb1e 	bne	r3,zero,4fdc <_gp+0xffff79c8>
    4ff0:	38000126 	beq	r7,zero,4ff8 <__modsi3+0x54>
    4ff4:	0085c83a 	sub	r2,zero,r2
    4ff8:	f800283a 	ret
    4ffc:	014bc83a 	sub	r5,zero,r5
    5000:	003fec06 	br	4fb4 <_gp+0xffff79a0>
    5004:	0109c83a 	sub	r4,zero,r4
    5008:	01c00044 	movi	r7,1
    500c:	003fe706 	br	4fac <_gp+0xffff7998>
    5010:	00c00044 	movi	r3,1
    5014:	003ff106 	br	4fdc <_gp+0xffff79c8>

00005018 <__udivsi3>:
    5018:	200d883a 	mov	r6,r4
    501c:	2900152e 	bgeu	r5,r4,5074 <__udivsi3+0x5c>
    5020:	28001416 	blt	r5,zero,5074 <__udivsi3+0x5c>
    5024:	00800804 	movi	r2,32
    5028:	00c00044 	movi	r3,1
    502c:	00000206 	br	5038 <__udivsi3+0x20>
    5030:	10000e26 	beq	r2,zero,506c <__udivsi3+0x54>
    5034:	28000516 	blt	r5,zero,504c <__udivsi3+0x34>
    5038:	294b883a 	add	r5,r5,r5
    503c:	10bfffc4 	addi	r2,r2,-1
    5040:	18c7883a 	add	r3,r3,r3
    5044:	293ffa36 	bltu	r5,r4,5030 <_gp+0xffff7a1c>
    5048:	18000826 	beq	r3,zero,506c <__udivsi3+0x54>
    504c:	0005883a 	mov	r2,zero
    5050:	31400236 	bltu	r6,r5,505c <__udivsi3+0x44>
    5054:	314dc83a 	sub	r6,r6,r5
    5058:	10c4b03a 	or	r2,r2,r3
    505c:	1806d07a 	srli	r3,r3,1
    5060:	280ad07a 	srli	r5,r5,1
    5064:	183ffa1e 	bne	r3,zero,5050 <_gp+0xffff7a3c>
    5068:	f800283a 	ret
    506c:	0005883a 	mov	r2,zero
    5070:	f800283a 	ret
    5074:	00c00044 	movi	r3,1
    5078:	003ff406 	br	504c <_gp+0xffff7a38>

0000507c <__umodsi3>:
    507c:	2005883a 	mov	r2,r4
    5080:	2900122e 	bgeu	r5,r4,50cc <__umodsi3+0x50>
    5084:	28001116 	blt	r5,zero,50cc <__umodsi3+0x50>
    5088:	01800804 	movi	r6,32
    508c:	00c00044 	movi	r3,1
    5090:	00000206 	br	509c <__umodsi3+0x20>
    5094:	30000c26 	beq	r6,zero,50c8 <__umodsi3+0x4c>
    5098:	28000516 	blt	r5,zero,50b0 <__umodsi3+0x34>
    509c:	294b883a 	add	r5,r5,r5
    50a0:	31bfffc4 	addi	r6,r6,-1
    50a4:	18c7883a 	add	r3,r3,r3
    50a8:	293ffa36 	bltu	r5,r4,5094 <_gp+0xffff7a80>
    50ac:	18000626 	beq	r3,zero,50c8 <__umodsi3+0x4c>
    50b0:	1806d07a 	srli	r3,r3,1
    50b4:	11400136 	bltu	r2,r5,50bc <__umodsi3+0x40>
    50b8:	1145c83a 	sub	r2,r2,r5
    50bc:	280ad07a 	srli	r5,r5,1
    50c0:	183ffb1e 	bne	r3,zero,50b0 <_gp+0xffff7a9c>
    50c4:	f800283a 	ret
    50c8:	f800283a 	ret
    50cc:	00c00044 	movi	r3,1
    50d0:	003ff706 	br	50b0 <_gp+0xffff7a9c>

000050d4 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    50d4:	00051601 	jmpi	5160 <alt_iic_isr_register>

000050d8 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    50d8:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    50dc:	00bfff84 	movi	r2,-2
    50e0:	2084703a 	and	r2,r4,r2
    50e4:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    50e8:	00c00044 	movi	r3,1
    50ec:	d0a04517 	ldw	r2,-32492(gp)
    50f0:	194a983a 	sll	r5,r3,r5
    50f4:	288ab03a 	or	r5,r5,r2
    50f8:	d1604515 	stw	r5,-32492(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    50fc:	d0a04517 	ldw	r2,-32492(gp)
    5100:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5104:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    5108:	0005883a 	mov	r2,zero
    510c:	f800283a 	ret

00005110 <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5110:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5114:	00bfff84 	movi	r2,-2
    5118:	2084703a 	and	r2,r4,r2
    511c:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    5120:	00ffff84 	movi	r3,-2
    5124:	d0a04517 	ldw	r2,-32492(gp)
    5128:	194a183a 	rol	r5,r3,r5
    512c:	288a703a 	and	r5,r5,r2
    5130:	d1604515 	stw	r5,-32492(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    5134:	d0a04517 	ldw	r2,-32492(gp)
    5138:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    513c:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    5140:	0005883a 	mov	r2,zero
    5144:	f800283a 	ret

00005148 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    5148:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    514c:	00800044 	movi	r2,1
    5150:	1144983a 	sll	r2,r2,r5
    5154:	10c4703a 	and	r2,r2,r3
}
    5158:	1004c03a 	cmpne	r2,r2,zero
    515c:	f800283a 	ret

00005160 <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    5160:	00c007c4 	movi	r3,31
    5164:	19401616 	blt	r3,r5,51c0 <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    5168:	defffe04 	addi	sp,sp,-8
    516c:	dfc00115 	stw	ra,4(sp)
    5170:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5174:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5178:	00ffff84 	movi	r3,-2
    517c:	80c6703a 	and	r3,r16,r3
    5180:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    5184:	280490fa 	slli	r2,r5,3
    5188:	00c00034 	movhi	r3,0
    518c:	18d5cf04 	addi	r3,r3,22332
    5190:	1885883a 	add	r2,r3,r2
    5194:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    5198:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    519c:	30000226 	beq	r6,zero,51a8 <alt_iic_isr_register+0x48>
    51a0:	00050d80 	call	50d8 <alt_ic_irq_enable>
    51a4:	00000106 	br	51ac <alt_iic_isr_register+0x4c>
    51a8:	00051100 	call	5110 <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    51ac:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    51b0:	dfc00117 	ldw	ra,4(sp)
    51b4:	dc000017 	ldw	r16,0(sp)
    51b8:	dec00204 	addi	sp,sp,8
    51bc:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
    51c0:	00bffa84 	movi	r2,-22
    51c4:	f800283a 	ret

000051c8 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    51c8:	008007c4 	movi	r2,31
    51cc:	11002136 	bltu	r2,r4,5254 <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    51d0:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    51d4:	00ffff84 	movi	r3,-2
    51d8:	38c4703a 	and	r2,r7,r3
    51dc:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    51e0:	200490fa 	slli	r2,r4,3
    51e4:	02000034 	movhi	r8,0
    51e8:	4215cf04 	addi	r8,r8,22332
    51ec:	4085883a 	add	r2,r8,r2
    51f0:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
    51f4:	11400115 	stw	r5,4(r2)
    51f8:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    51fc:	30000726 	beq	r6,zero,521c <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5200:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5204:	28c6703a 	and	r3,r5,r3
    5208:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    520c:	d0e04517 	ldw	r3,-32492(gp)
    5210:	1104983a 	sll	r2,r2,r4
    5214:	10c4b03a 	or	r2,r2,r3
    5218:	00000706 	br	5238 <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    521c:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5220:	28c6703a 	and	r3,r5,r3
    5224:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    5228:	1104983a 	sll	r2,r2,r4
    522c:	d0e04517 	ldw	r3,-32492(gp)
    5230:	0084303a 	nor	r2,zero,r2
    5234:	10c4703a 	and	r2,r2,r3
    5238:	d0a04515 	stw	r2,-32492(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    523c:	d0a04517 	ldw	r2,-32492(gp)
    5240:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5244:	2801703a 	wrctl	status,r5
    5248:	3801703a 	wrctl	status,r7
    524c:	0005883a 	mov	r2,zero
    5250:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
    5254:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
    5258:	f800283a 	ret

0000525c <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    525c:	deffff04 	addi	sp,sp,-4
    5260:	01000034 	movhi	r4,0
    5264:	01400034 	movhi	r5,0
    5268:	dfc00015 	stw	ra,0(sp)
    526c:	21154d04 	addi	r4,r4,21812
    5270:	29558a04 	addi	r5,r5,22056

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    5274:	2140061e 	bne	r4,r5,5290 <alt_load+0x34>
    5278:	01000034 	movhi	r4,0
    527c:	01400034 	movhi	r5,0
    5280:	21100804 	addi	r4,r4,16416
    5284:	29500804 	addi	r5,r5,16416
    5288:	2140121e 	bne	r4,r5,52d4 <alt_load+0x78>
    528c:	00000b06 	br	52bc <alt_load+0x60>
    5290:	00c00034 	movhi	r3,0
    5294:	18d58a04 	addi	r3,r3,22056
    5298:	1907c83a 	sub	r3,r3,r4
    529c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    52a0:	10fff526 	beq	r2,r3,5278 <_gp+0xffff7c64>
    {
      *to++ = *from++;
    52a4:	114f883a 	add	r7,r2,r5
    52a8:	39c00017 	ldw	r7,0(r7)
    52ac:	110d883a 	add	r6,r2,r4
    52b0:	10800104 	addi	r2,r2,4
    52b4:	31c00015 	stw	r7,0(r6)
    52b8:	003ff906 	br	52a0 <_gp+0xffff7c8c>
    52bc:	01000034 	movhi	r4,0
    52c0:	01400034 	movhi	r5,0
    52c4:	21153d04 	addi	r4,r4,21748
    52c8:	29553d04 	addi	r5,r5,21748

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    52cc:	2140101e 	bne	r4,r5,5310 <alt_load+0xb4>
    52d0:	00000b06 	br	5300 <alt_load+0xa4>
    52d4:	00c00034 	movhi	r3,0
    52d8:	18d06004 	addi	r3,r3,16768
    52dc:	1907c83a 	sub	r3,r3,r4
    52e0:	0005883a 	mov	r2,zero
  {
    while( to != end )
    52e4:	10fff526 	beq	r2,r3,52bc <_gp+0xffff7ca8>
    {
      *to++ = *from++;
    52e8:	114f883a 	add	r7,r2,r5
    52ec:	39c00017 	ldw	r7,0(r7)
    52f0:	110d883a 	add	r6,r2,r4
    52f4:	10800104 	addi	r2,r2,4
    52f8:	31c00015 	stw	r7,0(r6)
    52fc:	003ff906 	br	52e4 <_gp+0xffff7cd0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    5300:	00054700 	call	5470 <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    5304:	dfc00017 	ldw	ra,0(sp)
    5308:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    530c:	00054741 	jmpi	5474 <alt_icache_flush_all>
    5310:	00c00034 	movhi	r3,0
    5314:	18d54d04 	addi	r3,r3,21812
    5318:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    531c:	0005883a 	mov	r2,zero
  {
    while( to != end )
    5320:	18bff726 	beq	r3,r2,5300 <_gp+0xffff7cec>
    {
      *to++ = *from++;
    5324:	114f883a 	add	r7,r2,r5
    5328:	39c00017 	ldw	r7,0(r7)
    532c:	110d883a 	add	r6,r2,r4
    5330:	10800104 	addi	r2,r2,4
    5334:	31c00015 	stw	r7,0(r6)
    5338:	003ff906 	br	5320 <_gp+0xffff7d0c>

0000533c <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    533c:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    5340:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    5344:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    5348:	00053c80 	call	53c8 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    534c:	00053e80 	call	53e8 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    5350:	d1a04617 	ldw	r6,-32488(gp)
    5354:	d1604717 	ldw	r5,-32484(gp)
    5358:	d1204817 	ldw	r4,-32480(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    535c:	dfc00017 	ldw	ra,0(sp)
    5360:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    5364:	000458c1 	jmpi	458c <main>

00005368 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    5368:	00800044 	movi	r2,1
    536c:	20800226 	beq	r4,r2,5378 <write+0x10>
    5370:	00800084 	movi	r2,2
    5374:	2080041e 	bne	r4,r2,5388 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    5378:	01000034 	movhi	r4,0
    537c:	000f883a 	mov	r7,zero
    5380:	21158804 	addi	r4,r4,22048
    5384:	00053ec1 	jmpi	53ec <altera_avalon_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    5388:	d0a00417 	ldw	r2,-32752(gp)
    538c:	10000926 	beq	r2,zero,53b4 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    5390:	deffff04 	addi	sp,sp,-4
    5394:	dfc00015 	stw	ra,0(sp)
    5398:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    539c:	00c01444 	movi	r3,81
    53a0:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    53a4:	00bfffc4 	movi	r2,-1
    53a8:	dfc00017 	ldw	ra,0(sp)
    53ac:	dec00104 	addi	sp,sp,4
    53b0:	f800283a 	ret
    53b4:	d0a04404 	addi	r2,gp,-32496
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    53b8:	00c01444 	movi	r3,81
    53bc:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    53c0:	00bfffc4 	movi	r2,-1
    53c4:	f800283a 	ret

000053c8 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    53c8:	deffff04 	addi	sp,sp,-4
    53cc:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    53d0:	00054ec0 	call	54ec <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    53d4:	00800044 	movi	r2,1
    53d8:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    53dc:	dfc00017 	ldw	ra,0(sp)
    53e0:	dec00104 	addi	sp,sp,4
    53e4:	f800283a 	ret

000053e8 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    53e8:	f800283a 	ret

000053ec <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    53ec:	defffd04 	addi	sp,sp,-12
    53f0:	dc400115 	stw	r17,4(sp)
    53f4:	dc000015 	stw	r16,0(sp)
    53f8:	dfc00215 	stw	ra,8(sp)
    53fc:	3023883a 	mov	r17,r6
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
    5400:	39d0000c 	andi	r7,r7,16384
  count = len;
    5404:	3021883a 	mov	r16,r6

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    5408:	20c00017 	ldw	r3,0(r4)
    540c:	18800237 	ldwio	r2,8(r3)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    5410:	1080100c 	andi	r2,r2,64
    5414:	10000526 	beq	r2,zero,542c <altera_avalon_uart_write+0x40>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
    5418:	28800044 	addi	r2,r5,1
    541c:	29400007 	ldb	r5,0(r5)
    5420:	19400135 	stwio	r5,4(r3)
      count--;
    5424:	843fffc4 	addi	r16,r16,-1
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
    5428:	100b883a 	mov	r5,r2
      count--;
    }
  }
  while (block && count);
    542c:	3800021e 	bne	r7,zero,5438 <altera_avalon_uart_write+0x4c>
    5430:	803ff51e 	bne	r16,zero,5408 <_gp+0xffff7df4>
    5434:	00000806 	br	5458 <altera_avalon_uart_write+0x6c>

  if (count)
    5438:	80000726 	beq	r16,zero,5458 <altera_avalon_uart_write+0x6c>
    543c:	d0a00417 	ldw	r2,-32752(gp)
    5440:	10000226 	beq	r2,zero,544c <altera_avalon_uart_write+0x60>
    5444:	103ee83a 	callr	r2
    5448:	00000106 	br	5450 <altera_avalon_uart_write+0x64>
    544c:	d0a04404 	addi	r2,gp,-32496
  {
    ALT_ERRNO = EWOULDBLOCK;
    5450:	00c002c4 	movi	r3,11
    5454:	10c00015 	stw	r3,0(r2)
  }

  return (len - count);
}
    5458:	8c05c83a 	sub	r2,r17,r16
    545c:	dfc00217 	ldw	ra,8(sp)
    5460:	dc400117 	ldw	r17,4(sp)
    5464:	dc000017 	ldw	r16,0(sp)
    5468:	dec00304 	addi	sp,sp,12
    546c:	f800283a 	ret

00005470 <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    5470:	f800283a 	ret

00005474 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    5474:	f800283a 	ret

00005478 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    5478:	213ffe84 	addi	r4,r4,-6
    547c:	008003c4 	movi	r2,15
    5480:	11001636 	bltu	r2,r4,54dc <alt_exception_cause_generated_bad_addr+0x64>
    5484:	200890ba 	slli	r4,r4,2
    5488:	00800034 	movhi	r2,0
    548c:	10952704 	addi	r2,r2,21660
    5490:	2089883a 	add	r4,r4,r2
    5494:	20800017 	ldw	r2,0(r4)
    5498:	1000683a 	jmp	r2
    549c:	000054e4 	muli	zero,zero,339
    54a0:	000054e4 	muli	zero,zero,339
    54a4:	000054dc 	xori	zero,zero,339
    54a8:	000054dc 	xori	zero,zero,339
    54ac:	000054dc 	xori	zero,zero,339
    54b0:	000054e4 	muli	zero,zero,339
    54b4:	000054dc 	xori	zero,zero,339
    54b8:	000054dc 	xori	zero,zero,339
    54bc:	000054e4 	muli	zero,zero,339
    54c0:	000054e4 	muli	zero,zero,339
    54c4:	000054dc 	xori	zero,zero,339
    54c8:	000054e4 	muli	zero,zero,339
    54cc:	000054dc 	xori	zero,zero,339
    54d0:	000054dc 	xori	zero,zero,339
    54d4:	000054dc 	xori	zero,zero,339
    54d8:	000054e4 	muli	zero,zero,339
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    54dc:	0005883a 	mov	r2,zero
    54e0:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    54e4:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    54e8:	f800283a 	ret

000054ec <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    54ec:	000170fa 	wrctl	ienable,zero
    54f0:	f800283a 	ret
