
ver2_nofeedmsg.elf:     file format elf32-littlenios2
ver2_nofeedmsg.elf
architecture: nios2:r1, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x00004180

Program Header:
    LOAD off    0x00001000 vaddr 0x00004000 paddr 0x00004000 align 2**12
         filesz 0x00000020 memsz 0x00000020 flags r-x
    LOAD off    0x00001020 vaddr 0x00004020 paddr 0x00004020 align 2**12
         filesz 0x000014f0 memsz 0x000014f0 flags r-x
    LOAD off    0x00002510 vaddr 0x00005510 paddr 0x00005604 align 2**12
         filesz 0x000000f4 memsz 0x000000f4 flags rw-
    LOAD off    0x000026f8 vaddr 0x000056f8 paddr 0x000056f8 align 2**12
         filesz 0x00000000 memsz 0x00000120 flags rw-

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .entry        00000020  00004000  00004000  00001000  2**5
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .exceptions   00000160  00004020  00004020  00001020  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .text         00001350  00004180  00004180  00001180  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .rodata       00000040  000054d0  000054d0  000024d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rwdata       000000f4  00005510  00005604  00002510  2**2
                  CONTENTS, ALLOC, LOAD, DATA, SMALL_DATA
  5 .bss          00000120  000056f8  000056f8  000026f8  2**2
                  ALLOC, SMALL_DATA
  6 .onchip_memory2_0 00000000  00005818  00005818  00002604  2**0
                  CONTENTS
  7 .comment      00000023  00000000  00000000  00002604  2**0
                  CONTENTS, READONLY
  8 .debug_aranges 00000450  00000000  00000000  00002628  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   0000595e  00000000  00000000  00002a78  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00002089  00000000  00000000  000083d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   000022fb  00000000  00000000  0000a45f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000618  00000000  00000000  0000c75c  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0000175a  00000000  00000000  0000cd74  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    00001c45  00000000  00000000  0000e4ce  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_alt_sim_info 00000010  00000000  00000000  00010114  2**2
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_ranges 00000318  00000000  00000000  00010128  2**3
                  CONTENTS, READONLY, DEBUGGING
 17 .thread_model 00000003  00000000  00000000  00011912  2**0
                  CONTENTS, READONLY
 18 .cpu          0000000c  00000000  00000000  00011915  2**0
                  CONTENTS, READONLY
 19 .qsys         00000001  00000000  00000000  00011921  2**0
                  CONTENTS, READONLY
 20 .simulation_enabled 00000001  00000000  00000000  00011922  2**0
                  CONTENTS, READONLY
 21 .stderr_dev   00000004  00000000  00000000  00011923  2**0
                  CONTENTS, READONLY
 22 .stdin_dev    00000004  00000000  00000000  00011927  2**0
                  CONTENTS, READONLY
 23 .stdout_dev   00000004  00000000  00000000  0001192b  2**0
                  CONTENTS, READONLY
 24 .sopc_system_name 00000004  00000000  00000000  0001192f  2**0
                  CONTENTS, READONLY
 25 .quartus_project_dir 00000027  00000000  00000000  00011933  2**0
                  CONTENTS, READONLY
 26 .jdi          0000388d  00000000  00000000  0001195a  2**0
                  CONTENTS, READONLY
 27 .sopcinfo     000950f9  00000000  00000000  000151e7  2**0
                  CONTENTS, READONLY
SYMBOL TABLE:
00004000 l    d  .entry	00000000 .entry
00004020 l    d  .exceptions	00000000 .exceptions
00004180 l    d  .text	00000000 .text
000054d0 l    d  .rodata	00000000 .rodata
00005510 l    d  .rwdata	00000000 .rwdata
000056f8 l    d  .bss	00000000 .bss
00005818 l    d  .onchip_memory2_0	00000000 .onchip_memory2_0
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .debug_loc	00000000 .debug_loc
00000000 l    d  .debug_alt_sim_info	00000000 .debug_alt_sim_info
00000000 l    d  .debug_ranges	00000000 .debug_ranges
00000000 l    df *ABS*	00000000 ../ver2_nofeedmsg_bsp//obj/HAL/src/crt0.o
000041b8 l       .text	00000000 alt_after_alt_main
00000000 l    df *ABS*	00000000 alt_irq_handler.c
00000000 l    df *ABS*	00000000 alt_instruction_exception_entry.c
00000000 l    df *ABS*	00000000 hello_world_small.c
000041bc l     F .text	000000ec freq_isr
000043c4 l     F .text	00000150 uart_isr
000056f8 l     O .bss	00000001 rx_data
00000000 l    df *ABS*	00000000 lib2-mul.c
00000000 l    df *ABS*	00000000 printf.c
00000000 l    df *ABS*	00000000 putchar.c
00000000 l    df *ABS*	00000000 puts.c
00000000 l    df *ABS*	00000000 strlen.c
00000000 l    df *ABS*	00000000 strncmp.c
00000000 l    df *ABS*	00000000 vfprintf.c
0000478c l     F .text	0000006c print_repeat
00000000 l    df *ABS*	00000000 fvwrite_small_dev.c
00000000 l    df *ABS*	00000000 impure.c
00005510 l     O .rwdata	000000e0 impure_data
00000000 l    df *ABS*	00000000 putc.c
00000000 l    df *ABS*	00000000 writer.c
00000000 l    df *ABS*	00000000 int_errno.c
00000000 l    df *ABS*	00000000 lib2-divmod.c
00000000 l    df *ABS*	00000000 alt_iic.c
00000000 l    df *ABS*	00000000 alt_iic_isr_register.c
00000000 l    df *ABS*	00000000 alt_irq_register.c
00000000 l    df *ABS*	00000000 alt_irq_vars.c
00000000 l    df *ABS*	00000000 alt_load.c
00000000 l    df *ABS*	00000000 alt_main.c
00000000 l    df *ABS*	00000000 alt_write.c
00000000 l    df *ABS*	00000000 alt_sys_init.c
00000000 l    df *ABS*	00000000 altera_avalon_uart_write.c
00000000 l    df *ABS*	00000000 alt_dcache_flush_all.c
00000000 l    df *ABS*	00000000 alt_errno.c
00000000 l    df *ABS*	00000000 alt_icache_flush_all.c
00000000 l    df *ABS*	00000000 altera_nios2_gen2_irq.c
00005714 g     O .bss	00000004 alt_instruction_exception_handler
00004660 g     F .text	0000001c putchar
00005318 g     F .text	0000002c alt_main
0000467c g     F .text	00000080 _puts_r
00005718 g     O .bss	00000100 alt_irq
00005604 g       *ABS*	00000000 __flash_rwdata_start
0000460c g     F .text	0000004c printf
000054c8 g     F .text	00000008 altera_nios2_gen2_irq_init
00004000 g     F .entry	0000000c __reset
00004020 g       *ABS*	00000000 __flash_exceptions_start
00005700 g     O .bss	00000004 errno
0000570c g     O .bss	00000004 alt_argv
0000d5f0 g       *ABS*	00000000 _gp
00004658 g     F .text	00000008 _putchar_r
000046fc g     F .text	00000014 puts
00005454 g     F .text	00000074 alt_exception_cause_generated_bad_addr
000045d0 g     F .text	0000003c _printf_r
00004000 g       *ABS*	00000000 __alt_mem_onchip_memory2_0
00004ff4 g     F .text	00000064 .hidden __udivsi3
000051a4 g     F .text	00000094 alt_irq_register
000055f0 g     O .rwdata	00000004 _global_impure_ptr
00005818 g       *ABS*	00000000 __bss_end
0000513c g     F .text	00000068 alt_iic_isr_register
00005124 g     F .text	00000018 alt_ic_irq_enabled
00005704 g     O .bss	00000004 alt_irq_active
000040fc g     F .exceptions	00000060 alt_irq_handler
0000544c g     F .text	00000004 alt_dcache_flush_all
000056fc g     O .bss	00000004 timer_isr_context
00005604 g       *ABS*	00000000 __ram_rwdata_end
00004514 g     F .text	00000054 timer_init
00005344 g     F .text	00000060 write
00004e4c g     F .text	00000058 _putc_r
00005510 g       *ABS*	00000000 __ram_rodata_end
00005058 g     F .text	00000058 .hidden __umodsi3
00005818 g       *ABS*	00000000 end
000053c8 g     F .text	00000084 altera_avalon_uart_write
0000415c g     F .exceptions	00000024 alt_instruction_exception_entry
00008000 g       *ABS*	00000000 __alt_stack_pointer
000042a8 g     F .text	0000003c uart_init
000047f8 g     F .text	0000052c ___vfprintf_internal_r
00004180 g     F .text	0000003c _start
000053c4 g     F .text	00000004 alt_sys_init
0000472c g     F .text	00000060 strncmp
000045a8 g     F .text	00000028 .hidden __mulsi3
00005510 g       *ABS*	00000000 __ram_rwdata_start
000054d0 g       *ABS*	00000000 __ram_rodata_start
00005818 g       *ABS*	00000000 __alt_stack_base
00004d40 g     F .text	000000b8 __sfvwrite_small_dev
000056f8 g       *ABS*	00000000 __bss_start
00004568 g     F .text	00000040 main
00005708 g     O .bss	00000004 alt_envp
00005600 g     O .rwdata	00000004 alt_errno
00004df8 g     F .text	00000054 putc
00004efc g     F .text	00000084 .hidden __divsi3
000054d0 g       *ABS*	00000000 __flash_rodata_start
000053a4 g     F .text	00000020 alt_irq_init
00004ea4 g     F .text	00000058 _write_r
000055f4 g     O .rwdata	00000004 _impure_ptr
00005710 g     O .bss	00000004 alt_argc
00004020 g       .exceptions	00000000 alt_irq_entry
000042e4 g     F .text	000000e0 pwm
00004020 g       *ABS*	00000000 __ram_exceptions_start
000050b0 g     F .text	00000004 alt_ic_isr_register
00005604 g       *ABS*	00000000 _edata
00005818 g       *ABS*	00000000 _end
00004180 g       *ABS*	00000000 __ram_exceptions_end
000050ec g     F .text	00000038 alt_ic_irq_disable
00004f80 g     F .text	00000074 .hidden __modsi3
00008000 g       *ABS*	00000000 __alt_data_end
00004020 g     F .exceptions	00000000 alt_exception
000055fc g     O .rwdata	00000004 uart
0000400c g       .entry	00000000 _exit
00004710 g     F .text	0000001c strlen
00005450 g     F .text	00000004 alt_icache_flush_all
000055f8 g     O .rwdata	00000004 alt_priority_mask
000050b4 g     F .text	00000038 alt_ic_irq_enable
00004d24 g     F .text	0000001c __vfprintf_internal
00005238 g     F .text	000000e0 alt_load



Disassembly of section .entry:

00004000 <__reset>:
 * Jump to the _start entry point in the .text section if reset code
 * is allowed or if optimizing for RTL simulation.
 */
#if defined(ALT_ALLOW_CODE_AT_RESET) || defined(ALT_SIM_OPTIMIZE)
    /* Jump to the _start entry point in the .text section. */
    movhi r1, %hi(_start)
    4000:	00400034 	movhi	at,0
    ori r1, r1, %lo(_start)
    4004:	08506014 	ori	at,at,16768
    jmp r1
    4008:	0800683a 	jmp	at

0000400c <_exit>:
	...

Disassembly of section .exceptions:

00004020 <alt_exception>:

#else /* ALT_EXCEPTION_STACK disabled */
        /* 
         * Reserve space on normal stack for registers about to be pushed.
         */
        addi  sp, sp, -76
    4020:	deffed04 	addi	sp,sp,-76
         * documentation for details).
         *
         * Leave a gap in the stack frame at 4(sp) for the muldiv handler to
         * store zero into.
         */
        stw   ra,  0(sp)
    4024:	dfc00015 	stw	ra,0(sp)
        stw   r1,   8(sp)
    4028:	d8400215 	stw	at,8(sp)
        stw   r2,  12(sp)
    402c:	d8800315 	stw	r2,12(sp)
        stw   r3,  16(sp)
    4030:	d8c00415 	stw	r3,16(sp)
        stw   r4,  20(sp)
    4034:	d9000515 	stw	r4,20(sp)
        stw   r5,  24(sp)
    4038:	d9400615 	stw	r5,24(sp)
        stw   r6,  28(sp)
    403c:	d9800715 	stw	r6,28(sp)
        stw   r7,  32(sp)
    4040:	d9c00815 	stw	r7,32(sp)
        rdctl r5, estatus   /* Read early to avoid usage stall */
    4044:	000b307a 	rdctl	r5,estatus
        stw   r8,  36(sp)
    4048:	da000915 	stw	r8,36(sp)
        stw   r9,  40(sp)
    404c:	da400a15 	stw	r9,40(sp)
        stw   r10, 44(sp)
    4050:	da800b15 	stw	r10,44(sp)
        stw   r11, 48(sp)
    4054:	dac00c15 	stw	r11,48(sp)
        stw   r12, 52(sp)
    4058:	db000d15 	stw	r12,52(sp)
        stw   r13, 56(sp)
    405c:	db400e15 	stw	r13,56(sp)
        stw   r14, 60(sp)
    4060:	db800f15 	stw	r14,60(sp)
        stw   r15, 64(sp)
    4064:	dbc01015 	stw	r15,64(sp)
        /*
         * ea-4 contains the address of the instruction being executed
         * when the exception occured. For interrupt exceptions, we will
         * will be re-issue the isntruction. Store it in 72(sp)
         */
        stw   r5,  68(sp)  /* estatus */
    4068:	d9401115 	stw	r5,68(sp)
        addi  r15, ea, -4  /* instruction that caused exception */
    406c:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    4070:	dbc01215 	stw	r15,72(sp)
#else
        /*
         * Test to see if the exception was a software exception or caused 
         * by an external interrupt, and vector accordingly.
         */
        rdctl r4, ipending
    4074:	0009313a 	rdctl	r4,ipending
        andi  r2, r5, 1
    4078:	2880004c 	andi	r2,r5,1
        beq   r2, zero, .Lnot_irq
    407c:	10000326 	beq	r2,zero,408c <alt_exception+0x6c>
        beq   r4, zero, .Lnot_irq
    4080:	20000226 	beq	r4,zero,408c <alt_exception+0x6c>
        /*
         * Now that all necessary registers have been preserved, call 
         * alt_irq_handler() to process the interrupts.
         */

        call alt_irq_handler
    4084:	00040fc0 	call	40fc <alt_irq_handler>

        .section .exceptions.irqreturn, "xa"

        br    .Lexception_exit
    4088:	00000706 	br	40a8 <alt_exception+0x88>
         * upon completion, so we write ea (address of instruction *after*
         * the one where the exception occured) into 72(sp). The actual
         * instruction that caused the exception is written in r2, which these
         * handlers will utilize.
         */
        stw ea, 72(sp) /* EA is PC+4 so will skip over instruction causing exception */
    408c:	df401215 	stw	ea,72(sp)
.Lunknown_16bit:
        addi.n r4, r4, 2 /* Need PC+2 to skip over instruction causing exception */
        stw r4, 72(sp)

#else /* CDX is not Enabled and all instructions are 32bits */
        ldw r2, -4(ea) /* Instruction value that caused exception */
    4090:	e8bfff17 	ldw	r2,-4(ea)
         * debugger is present) or go into an infinite loop since the
         * handling behavior is undefined; in that case we will not return here.
         */

        /* Load exception-causing address as first argument (r4) */
        addi   r4, ea, -4
    4094:	e93fff04 	addi	r4,ea,-4

        /* Call the instruction-exception entry */
        call   alt_instruction_exception_entry
    4098:	000415c0 	call	415c <alt_instruction_exception_entry>
         * instruction
         *
         * Return code was 0: Skip. The instruction after the exception is
         * already stored in 72(sp).
         */
        bne   r2, r0, .Lexception_exit
    409c:	1000021e 	bne	r2,zero,40a8 <alt_exception+0x88>

        /*
         * Otherwise, modify 72(sp) to re-issue the instruction that caused the
         * exception.
         */
        addi  r15, ea, -4  /* instruction that caused exception */
    40a0:	ebffff04 	addi	r15,ea,-4
        stw   r15,  72(sp)
    40a4:	dbc01215 	stw	r15,72(sp)
        /* 
         * Restore the saved registers, so that all general purpose registers 
         * have been restored to their state at the time the interrupt occured.
         */

        ldw   r5,  68(sp)
    40a8:	d9401117 	ldw	r5,68(sp)
        ldw   ea,  72(sp)  /* This becomes the PC once eret is executed */
    40ac:	df401217 	ldw	ea,72(sp)
        ldw   ra,   0(sp)
    40b0:	dfc00017 	ldw	ra,0(sp)

        wrctl estatus, r5
    40b4:	2801707a 	wrctl	estatus,r5

        ldw   r1,   8(sp)
    40b8:	d8400217 	ldw	at,8(sp)
        ldw   r2,  12(sp)
    40bc:	d8800317 	ldw	r2,12(sp)
        ldw   r3,  16(sp)
    40c0:	d8c00417 	ldw	r3,16(sp)
        ldw   r4,  20(sp)
    40c4:	d9000517 	ldw	r4,20(sp)
        ldw   r5,  24(sp)
    40c8:	d9400617 	ldw	r5,24(sp)
        ldw   r6,  28(sp)
    40cc:	d9800717 	ldw	r6,28(sp)
        ldw   r7,  32(sp)
    40d0:	d9c00817 	ldw	r7,32(sp)

#if defined(ALT_EXCEPTION_STACK) && defined(ALT_STACK_CHECK)
        ldw   et, %gprel(alt_exception_old_stack_limit)(gp)
#endif

        ldw   r8,  36(sp)
    40d4:	da000917 	ldw	r8,36(sp)
        ldw   r9,  40(sp)
    40d8:	da400a17 	ldw	r9,40(sp)
        ldw   r10, 44(sp)
    40dc:	da800b17 	ldw	r10,44(sp)
        ldw   r11, 48(sp)
    40e0:	dac00c17 	ldw	r11,48(sp)
        ldw   r12, 52(sp)
    40e4:	db000d17 	ldw	r12,52(sp)
        ldw   r13, 56(sp)
    40e8:	db400e17 	ldw	r13,56(sp)
        ldw   r14, 60(sp)
    40ec:	db800f17 	ldw	r14,60(sp)
        ldw   r15, 64(sp)
    40f0:	dbc01017 	ldw	r15,64(sp)
        stw   et, %gprel(alt_stack_limit_value)(gp)
        stw   zero, %gprel(alt_exception_old_stack_limit)(gp)
#endif /* ALT_STACK_CHECK */
        ldw   sp,  76(sp)
#else /* ALT_EXCEPTION_STACK disabled */
        addi  sp, sp, 76
    40f4:	dec01304 	addi	sp,sp,76

        /*
         * Return to the interrupted instruction.
         */

        eret
    40f8:	ef80083a 	eret

000040fc <alt_irq_handler>:
 * instruction is present if the macro ALT_CI_INTERRUPT_VECTOR defined.
 */

void alt_irq_handler (void) __attribute__ ((section (".exceptions")));
void alt_irq_handler (void)
{
    40fc:	defffe04 	addi	sp,sp,-8
    4100:	dfc00115 	stw	ra,4(sp)
    4104:	dc000015 	stw	r16,0(sp)
#ifndef NIOS2_EIC_PRESENT
static ALT_INLINE alt_u32 ALT_ALWAYS_INLINE alt_irq_pending (void)
{
  alt_u32 active;

  NIOS2_READ_IPENDING (active);
    4108:	0009313a 	rdctl	r4,ipending
    do
    {
      if (active & mask)
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    410c:	04000034 	movhi	r16,0
    4110:	8415c604 	addi	r16,r16,22296

  active = alt_irq_pending ();

  do
  {
    i = 0;
    4114:	0005883a 	mov	r2,zero
    mask = 1;
    4118:	00c00044 	movi	r3,1
     * called to clear the interrupt condition.
     */

    do
    {
      if (active & mask)
    411c:	20ca703a 	and	r5,r4,r3
    4120:	28000b26 	beq	r5,zero,4150 <alt_irq_handler+0x54>
      { 
#ifdef ALT_ENHANCED_INTERRUPT_API_PRESENT
        alt_irq[i].handler(alt_irq[i].context); 
    4124:	100490fa 	slli	r2,r2,3
    4128:	8085883a 	add	r2,r16,r2
    412c:	10c00017 	ldw	r3,0(r2)
    4130:	11000117 	ldw	r4,4(r2)
    4134:	183ee83a 	callr	r3
    4138:	0009313a 	rdctl	r4,ipending

    } while (1);

    active = alt_irq_pending ();
    
  } while (active);
    413c:	203ff51e 	bne	r4,zero,4114 <_gp+0xffff6b24>
  /*
   * Notify the operating system that interrupt processing is complete.
   */ 

  ALT_OS_INT_EXIT();
}
    4140:	dfc00117 	ldw	ra,4(sp)
    4144:	dc000017 	ldw	r16,0(sp)
    4148:	dec00204 	addi	sp,sp,8
    414c:	f800283a 	ret
#else
        alt_irq[i].handler(alt_irq[i].context, i); 
#endif
        break;
      }
      mask <<= 1;
    4150:	18c7883a 	add	r3,r3,r3
      i++;
    4154:	10800044 	addi	r2,r2,1

    } while (1);
    4158:	003ff006 	br	411c <_gp+0xffff6b2c>

0000415c <alt_instruction_exception_entry>:
#else
  cause = NIOS2_EXCEPTION_CAUSE_NOT_PRESENT;
  badaddr = 0;
#endif /* NIOS2_HAS_EXTRA_EXCEPTION_INFO */

  if(alt_instruction_exception_handler) {
    415c:	d0a04917 	ldw	r2,-32476(gp)
    4160:	10000426 	beq	r2,zero,4174 <alt_instruction_exception_entry+0x18>
     * Call handler. Its return value indicates whether the exception-causing
     * instruction should be re-issued. The code that called us,
     * alt_eceptions_entry.S, will look at this value and adjust the ea
     * register as necessary
     */
    return alt_instruction_exception_handler(cause, exception_pc, badaddr);
    4164:	200b883a 	mov	r5,r4
    4168:	000d883a 	mov	r6,zero
    416c:	013fffc4 	movi	r4,-1
    4170:	1000683a 	jmp	r2
   *    (a peripheral which negates its interrupt output before its
   *    interrupt handler has been executed will cause spurious interrupts)
   */
  else {
#ifdef NIOS2_HAS_DEBUG_STUB
    NIOS2_BREAK();
    4174:	003da03a 	break	0
#endif /* NIOS2_HAS_DEBUG_STUB */
  }

  /* We should not get here. Remove compiler warning. */
  return NIOS2_EXCEPTION_RETURN_REISSUE_INST;
}
    4178:	0005883a 	mov	r2,zero
    417c:	f800283a 	ret

Disassembly of section .text:

00004180 <_start>:

    /*
     * Now that the caches are initialized, set up the stack pointer and global pointer.
     * The values provided by the linker are assumed to be correctly aligned.
     */
    movhi sp, %hi(__alt_stack_pointer)
    4180:	06c00034 	movhi	sp,0
    ori sp, sp, %lo(__alt_stack_pointer)
    4184:	dee00014 	ori	sp,sp,32768
    movhi gp, %hi(_gp)
    4188:	06800034 	movhi	gp,0
    ori gp, gp, %lo(_gp)
    418c:	d6b57c14 	ori	gp,gp,54768
 */
#ifndef ALT_SIM_OPTIMIZE
    /* Log that the BSS is about to be cleared. */
    ALT_LOG_PUTS(alt_log_msg_bss)

    movhi r2, %hi(__bss_start)
    4190:	00800034 	movhi	r2,0
    ori r2, r2, %lo(__bss_start)
    4194:	1095be14 	ori	r2,r2,22264

    movhi r3, %hi(__bss_end)
    4198:	00c00034 	movhi	r3,0
    ori r3, r3, %lo(__bss_end)
    419c:	18d60614 	ori	r3,r3,22552

    beq r2, r3, 1f
    41a0:	10c00326 	beq	r2,r3,41b0 <_start+0x30>

0:
    stw zero, (r2)
    41a4:	10000015 	stw	zero,0(r2)
    addi r2, r2, 4
    41a8:	10800104 	addi	r2,r2,4
    bltu r2, r3, 0b
    41ac:	10fffd36 	bltu	r2,r3,41a4 <_gp+0xffff6bb4>
     * section aren't defined until alt_load() has been called).
     */
    mov   et, zero
#endif

    call alt_load
    41b0:	00052380 	call	5238 <alt_load>

    /* Log that alt_main is about to be called. */
    ALT_LOG_PUTS(alt_log_msg_alt_main)

    /* Call the C entry point. It should never return. */
    call alt_main
    41b4:	00053180 	call	5318 <alt_main>

000041b8 <alt_after_alt_main>:

    /* Wait in infinite loop in case alt_main does return. */
alt_after_alt_main:
    br alt_after_alt_main
    41b8:	003fff06 	br	41b8 <_gp+0xffff6bc8>

000041bc <freq_isr>:
	IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE,0X80);
	printf("Initialized \n");
	printf("***************** \n");
}

static void freq_isr(){
    41bc:	defffb04 	addi	sp,sp,-20
    41c0:	dfc00415 	stw	ra,16(sp)
    41c4:	dcc00315 	stw	r19,12(sp)
    41c8:	dc800215 	stw	r18,8(sp)
    41cc:	dc400115 	stw	r17,4(sp)
    41d0:	dc000015 	stw	r16,0(sp)


	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE,
    41d4:	00a40814 	movui	r2,36896
    41d8:	00ffff84 	movi	r3,-2
    41dc:	10c00035 	stwio	r3,0(r2)
	      ~ ALTERA_AVALON_TIMER_STATUS_TO_MSK);

	alt_u32 p = 0x000000;
	int i;
	for(i=0;i<8;i++){
		switch(i){
    41e0:	04c00034 	movhi	r19,0
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE,
	      ~ ALTERA_AVALON_TIMER_STATUS_TO_MSK);

	alt_u32 p = 0x000000;
	int i;
	for(i=0;i<8;i++){
    41e4:	0021883a 	mov	r16,zero
		switch(i){
    41e8:	04400184 	movi	r17,6
			case 0:p = IORD_ALTERA_AVALON_PIO_DATA(FREQ_0_BASE);break;
    41ec:	04a43014 	movui	r18,37056
	      ~ ALTERA_AVALON_TIMER_STATUS_TO_MSK);

	alt_u32 p = 0x000000;
	int i;
	for(i=0;i<8;i++){
		switch(i){
    41f0:	9cd08304 	addi	r19,r19,16908
    41f4:	80bfffc4 	addi	r2,r16,-1
    41f8:	88800b36 	bltu	r17,r2,4228 <freq_isr+0x6c>
    41fc:	100490ba 	slli	r2,r2,2
    4200:	14c5883a 	add	r2,r2,r19
    4204:	10800017 	ldw	r2,0(r2)
    4208:	1000683a 	jmp	r2
    420c:	00004230 	cmpltui	zero,zero,264
    4210:	00004238 	rdprs	zero,zero,264
    4214:	00004240 	call	424 <__alt_mem_onchip_memory2_0-0x3bdc>
    4218:	00004248 	cmpgei	zero,zero,265
    421c:	00004250 	cmplti	zero,zero,265
    4220:	00004258 	cmpnei	zero,zero,265
    4224:	00004260 	cmpeqi	zero,zero,265
			case 0:p = IORD_ALTERA_AVALON_PIO_DATA(FREQ_0_BASE);break;
    4228:	91400037 	ldwio	r5,0(r18)
    422c:	00000e06 	br	4268 <freq_isr+0xac>
			case 1:p = IORD_ALTERA_AVALON_PIO_DATA(FREQ_1_BASE);break;
    4230:	00a43414 	movui	r2,37072
    4234:	00000b06 	br	4264 <freq_isr+0xa8>
			case 2:p = IORD_ALTERA_AVALON_PIO_DATA(FREQ_2_BASE);break;
    4238:	00a43814 	movui	r2,37088
    423c:	00000906 	br	4264 <freq_isr+0xa8>
			case 3:p = IORD_ALTERA_AVALON_PIO_DATA(FREQ_3_BASE);break;
    4240:	00a43c14 	movui	r2,37104
    4244:	00000706 	br	4264 <freq_isr+0xa8>
			case 4:p = IORD_ALTERA_AVALON_PIO_DATA(FREQ_4_BASE);break;
    4248:	00a44014 	movui	r2,37120
    424c:	00000506 	br	4264 <freq_isr+0xa8>
			case 5:p = IORD_ALTERA_AVALON_PIO_DATA(FREQ_5_BASE);break;
    4250:	00a44414 	movui	r2,37136
    4254:	00000306 	br	4264 <freq_isr+0xa8>
			case 6:p = IORD_ALTERA_AVALON_PIO_DATA(FREQ_6_BASE);break;
    4258:	00a44814 	movui	r2,37152
    425c:	00000106 	br	4264 <freq_isr+0xa8>
			case 7:p = IORD_ALTERA_AVALON_PIO_DATA(FREQ_7_BASE);break;
    4260:	00a44c14 	movui	r2,37168
    4264:	11400037 	ldwio	r5,0(r2)
			};
		printf("%u",p);
    4268:	01000034 	movhi	r4,0
    426c:	21153404 	addi	r4,r4,21712
    4270:	000460c0 	call	460c <printf>
		printf(" ");
    4274:	01000804 	movi	r4,32
    4278:	00046600 	call	4660 <putchar>
	IOWR_ALTERA_AVALON_TIMER_STATUS(TIMER_0_BASE,
	      ~ ALTERA_AVALON_TIMER_STATUS_TO_MSK);

	alt_u32 p = 0x000000;
	int i;
	for(i=0;i<8;i++){
    427c:	84000044 	addi	r16,r16,1
    4280:	00800204 	movi	r2,8
    4284:	80bfdb1e 	bne	r16,r2,41f4 <_gp+0xffff6c04>
			case 7:p = IORD_ALTERA_AVALON_PIO_DATA(FREQ_7_BASE);break;
			};
		printf("%u",p);
		printf(" ");
	}
	printf("\n");
    4288:	01000284 	movi	r4,10

}
    428c:	dfc00417 	ldw	ra,16(sp)
    4290:	dcc00317 	ldw	r19,12(sp)
    4294:	dc800217 	ldw	r18,8(sp)
    4298:	dc400117 	ldw	r17,4(sp)
    429c:	dc000017 	ldw	r16,0(sp)
    42a0:	dec00504 	addi	sp,sp,20
			case 7:p = IORD_ALTERA_AVALON_PIO_DATA(FREQ_7_BASE);break;
			};
		printf("%u",p);
		printf(" ");
	}
	printf("\n");
    42a4:	00046601 	jmpi	4660 <putchar>

000042a8 <uart_init>:
static alt_u8 tx_data = 0;

unsigned int timer_isr_context;


void uart_init(){
    42a8:	deffff04 	addi	sp,sp,-4
    42ac:	dfc00015 	stw	ra,0(sp)
	IOWR_ALTERA_AVALON_UART_STATUS(UART_BASE,0);
    42b0:	00a40214 	movui	r2,36872
    42b4:	10000035 	stwio	zero,0(r2)
	IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE,0X80);
    42b8:	00a40314 	movui	r2,36876
    42bc:	00c02004 	movi	r3,128
    42c0:	10c00035 	stwio	r3,0(r2)
	printf("Initialized \n");
    42c4:	01000034 	movhi	r4,0
    42c8:	21153504 	addi	r4,r4,21716
    42cc:	00046fc0 	call	46fc <puts>
	printf("***************** \n");
    42d0:	01000034 	movhi	r4,0
    42d4:	21153904 	addi	r4,r4,21732
}
    42d8:	dfc00017 	ldw	ra,0(sp)
    42dc:	dec00104 	addi	sp,sp,4

void uart_init(){
	IOWR_ALTERA_AVALON_UART_STATUS(UART_BASE,0);
	IOWR_ALTERA_AVALON_UART_CONTROL(UART_BASE,0X80);
	printf("Initialized \n");
	printf("***************** \n");
    42e0:	00046fc1 	jmpi	46fc <puts>

000042e4 <pwm>:

	};

}

void pwm(int *get_perc){
    42e4:	defffe04 	addi	sp,sp,-8
			for(int j=0;j<data_pwm[i];j++){
				pwm_rec = pwm_rec + 1;
			}


			switch(i){
    42e8:	02800034 	movhi	r10,0

	};

}

void pwm(int *get_perc){
    42ec:	dfc00115 	stw	ra,4(sp)
    42f0:	dc000015 	stw	r16,0(sp)

	int *data_pwm = get_perc;
	int i;
	int pwm_rec = 0x00;

	for(i=0;i<8;i++){
    42f4:	000b883a 	mov	r5,zero

		if(data_pwm[i]<=100){
    42f8:	01c01904 	movi	r7,100
			for(int j=0;j<data_pwm[i];j++){
				pwm_rec = pwm_rec + 1;
			}


			switch(i){
    42fc:	02000184 	movi	r8,6
				case 0:IOWR_ALTERA_AVALON_PIO_DATA(PWM_0_BASE,pwm_rec);break;
    4300:	02641014 	movui	r9,36928
			for(int j=0;j<data_pwm[i];j++){
				pwm_rec = pwm_rec + 1;
			}


			switch(i){
    4304:	5290d404 	addi	r10,r10,17232
				case 2:IOWR_ALTERA_AVALON_PIO_DATA(PWM_2_BASE,pwm_rec);break;
				case 3:IOWR_ALTERA_AVALON_PIO_DATA(PWM_3_BASE,pwm_rec);break;
				case 4:IOWR_ALTERA_AVALON_PIO_DATA(PWM_4_BASE,pwm_rec);break;
				case 5:IOWR_ALTERA_AVALON_PIO_DATA(PWM_5_BASE,pwm_rec);break;
				case 6:IOWR_ALTERA_AVALON_PIO_DATA(PWM_6_BASE,pwm_rec);break;
				case 7:IOWR_ALTERA_AVALON_PIO_DATA(PWM_7_BASE,pwm_rec);break;
    4308:	02e42c14 	movui	r11,37040
				case 1:IOWR_ALTERA_AVALON_PIO_DATA(PWM_1_BASE,pwm_rec);break;
				case 2:IOWR_ALTERA_AVALON_PIO_DATA(PWM_2_BASE,pwm_rec);break;
				case 3:IOWR_ALTERA_AVALON_PIO_DATA(PWM_3_BASE,pwm_rec);break;
				case 4:IOWR_ALTERA_AVALON_PIO_DATA(PWM_4_BASE,pwm_rec);break;
				case 5:IOWR_ALTERA_AVALON_PIO_DATA(PWM_5_BASE,pwm_rec);break;
				case 6:IOWR_ALTERA_AVALON_PIO_DATA(PWM_6_BASE,pwm_rec);break;
    430c:	03242414 	movui	r12,37008
				case 0:IOWR_ALTERA_AVALON_PIO_DATA(PWM_0_BASE,pwm_rec);break;
				case 1:IOWR_ALTERA_AVALON_PIO_DATA(PWM_1_BASE,pwm_rec);break;
				case 2:IOWR_ALTERA_AVALON_PIO_DATA(PWM_2_BASE,pwm_rec);break;
				case 3:IOWR_ALTERA_AVALON_PIO_DATA(PWM_3_BASE,pwm_rec);break;
				case 4:IOWR_ALTERA_AVALON_PIO_DATA(PWM_4_BASE,pwm_rec);break;
				case 5:IOWR_ALTERA_AVALON_PIO_DATA(PWM_5_BASE,pwm_rec);break;
    4310:	03642814 	movui	r13,37024
			switch(i){
				case 0:IOWR_ALTERA_AVALON_PIO_DATA(PWM_0_BASE,pwm_rec);break;
				case 1:IOWR_ALTERA_AVALON_PIO_DATA(PWM_1_BASE,pwm_rec);break;
				case 2:IOWR_ALTERA_AVALON_PIO_DATA(PWM_2_BASE,pwm_rec);break;
				case 3:IOWR_ALTERA_AVALON_PIO_DATA(PWM_3_BASE,pwm_rec);break;
				case 4:IOWR_ALTERA_AVALON_PIO_DATA(PWM_4_BASE,pwm_rec);break;
    4314:	03a42014 	movui	r14,36992

			switch(i){
				case 0:IOWR_ALTERA_AVALON_PIO_DATA(PWM_0_BASE,pwm_rec);break;
				case 1:IOWR_ALTERA_AVALON_PIO_DATA(PWM_1_BASE,pwm_rec);break;
				case 2:IOWR_ALTERA_AVALON_PIO_DATA(PWM_2_BASE,pwm_rec);break;
				case 3:IOWR_ALTERA_AVALON_PIO_DATA(PWM_3_BASE,pwm_rec);break;
    4318:	03e41c14 	movui	r15,36976


			switch(i){
				case 0:IOWR_ALTERA_AVALON_PIO_DATA(PWM_0_BASE,pwm_rec);break;
				case 1:IOWR_ALTERA_AVALON_PIO_DATA(PWM_1_BASE,pwm_rec);break;
				case 2:IOWR_ALTERA_AVALON_PIO_DATA(PWM_2_BASE,pwm_rec);break;
    431c:	07e41814 	movui	ra,36960
			}


			switch(i){
				case 0:IOWR_ALTERA_AVALON_PIO_DATA(PWM_0_BASE,pwm_rec);break;
				case 1:IOWR_ALTERA_AVALON_PIO_DATA(PWM_1_BASE,pwm_rec);break;
    4320:	04241414 	movui	r16,36944

	int *data_pwm = get_perc;
	int i;
	int pwm_rec = 0x00;

	for(i=0;i<8;i++){
    4324:	01800204 	movi	r6,8

		if(data_pwm[i]<=100){
    4328:	20800017 	ldw	r2,0(r4)
    432c:	38801e16 	blt	r7,r2,43a8 <pwm+0xc4>
    4330:	1000010e 	bge	r2,zero,4338 <pwm+0x54>
    4334:	0005883a 	mov	r2,zero
			for(int j=0;j<data_pwm[i];j++){
				pwm_rec = pwm_rec + 1;
			}


			switch(i){
    4338:	28ffffc4 	addi	r3,r5,-1
    433c:	40c00b36 	bltu	r8,r3,436c <pwm+0x88>
    4340:	180690ba 	slli	r3,r3,2
    4344:	1a87883a 	add	r3,r3,r10
    4348:	18c00017 	ldw	r3,0(r3)
    434c:	1800683a 	jmp	r3
    4350:	00004374 	movhi	zero,269
    4354:	0000437c 	xorhi	zero,zero,269
    4358:	00004384 	movi	zero,270
    435c:	0000438c 	andi	zero,zero,270
    4360:	00004394 	movui	zero,270
    4364:	0000439c 	xori	zero,zero,270
    4368:	000043a4 	muli	zero,zero,270
				case 0:IOWR_ALTERA_AVALON_PIO_DATA(PWM_0_BASE,pwm_rec);break;
    436c:	48800035 	stwio	r2,0(r9)
    4370:	00000d06 	br	43a8 <pwm+0xc4>
				case 1:IOWR_ALTERA_AVALON_PIO_DATA(PWM_1_BASE,pwm_rec);break;
    4374:	80800035 	stwio	r2,0(r16)
    4378:	00000b06 	br	43a8 <pwm+0xc4>
				case 2:IOWR_ALTERA_AVALON_PIO_DATA(PWM_2_BASE,pwm_rec);break;
    437c:	f8800035 	stwio	r2,0(ra)
    4380:	00000906 	br	43a8 <pwm+0xc4>
				case 3:IOWR_ALTERA_AVALON_PIO_DATA(PWM_3_BASE,pwm_rec);break;
    4384:	78800035 	stwio	r2,0(r15)
    4388:	00000706 	br	43a8 <pwm+0xc4>
				case 4:IOWR_ALTERA_AVALON_PIO_DATA(PWM_4_BASE,pwm_rec);break;
    438c:	70800035 	stwio	r2,0(r14)
    4390:	00000506 	br	43a8 <pwm+0xc4>
				case 5:IOWR_ALTERA_AVALON_PIO_DATA(PWM_5_BASE,pwm_rec);break;
    4394:	68800035 	stwio	r2,0(r13)
    4398:	00000306 	br	43a8 <pwm+0xc4>
				case 6:IOWR_ALTERA_AVALON_PIO_DATA(PWM_6_BASE,pwm_rec);break;
    439c:	60800035 	stwio	r2,0(r12)
    43a0:	00000106 	br	43a8 <pwm+0xc4>
				case 7:IOWR_ALTERA_AVALON_PIO_DATA(PWM_7_BASE,pwm_rec);break;
    43a4:	58800035 	stwio	r2,0(r11)

	int *data_pwm = get_perc;
	int i;
	int pwm_rec = 0x00;

	for(i=0;i<8;i++){
    43a8:	29400044 	addi	r5,r5,1
    43ac:	21000104 	addi	r4,r4,4
    43b0:	29bfdd1e 	bne	r5,r6,4328 <_gp+0xffff6d38>
		else{

		};
		pwm_rec = 0x00;
	}
}
    43b4:	dfc00117 	ldw	ra,4(sp)
    43b8:	dc000017 	ldw	r16,0(sp)
    43bc:	dec00204 	addi	sp,sp,8
    43c0:	f800283a 	ret

000043c4 <uart_isr>:
	printf("\n");

}


static void uart_isr(){
    43c4:	0005883a 	mov	r2,zero



	while(1){

		while(!((IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)&ALTERA_AVALON_UART_STATUS_RRDY_MSK)));
    43c8:	01240214 	movui	r4,36872

		rx_data = IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE);
    43cc:	01640014 	movui	r5,36864

		while(!((IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)&ALTERA_AVALON_UART_STATUS_TRDY_MSK)));

		if(rx_data == '\n'){
    43d0:	01800284 	movi	r6,10



	while(1){

		while(!((IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)&ALTERA_AVALON_UART_STATUS_RRDY_MSK)));
    43d4:	20c00037 	ldwio	r3,0(r4)
    43d8:	01e40214 	movui	r7,36872
    43dc:	18c0200c 	andi	r3,r3,128
    43e0:	183ffc26 	beq	r3,zero,43d4 <_gp+0xffff6de4>

		rx_data = IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE);
    43e4:	28c00037 	ldwio	r3,0(r5)
    43e8:	d0e04205 	stb	r3,-32504(gp)

		while(!((IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)&ALTERA_AVALON_UART_STATUS_TRDY_MSK)));
    43ec:	38c00037 	ldwio	r3,0(r7)
    43f0:	18c0100c 	andi	r3,r3,64
    43f4:	183ffd26 	beq	r3,zero,43ec <_gp+0xffff6dfc>

		if(rx_data == '\n'){
    43f8:	d0e04203 	ldbu	r3,-32504(gp)
    43fc:	19c03fcc 	andi	r7,r3,255
    4400:	39800326 	beq	r7,r6,4410 <uart_isr+0x4c>
			break;
		};

		save[z] = rx_data;
    4404:	10c00005 	stb	r3,0(r2)
    4408:	10800044 	addi	r2,r2,1

		z++;
	};
    440c:	003ff106 	br	43d4 <_gp+0xffff6de4>


	int result_p = strncmp(cmd_pwm,save,3);
    4410:	01000034 	movhi	r4,0
	printf("\n");

}


static void uart_isr(){
    4414:	deffe204 	addi	sp,sp,-120

		z++;
	};


	int result_p = strncmp(cmd_pwm,save,3);
    4418:	018000c4 	movi	r6,3
    441c:	000b883a 	mov	r5,zero
    4420:	21153e04 	addi	r4,r4,21752
	printf("\n");

}


static void uart_isr(){
    4424:	dfc01d15 	stw	ra,116(sp)
    4428:	dd001c15 	stw	r20,112(sp)
    442c:	dcc01b15 	stw	r19,108(sp)
    4430:	dc801a15 	stw	r18,104(sp)
    4434:	dc401915 	stw	r17,100(sp)
    4438:	dc001815 	stw	r16,96(sp)

		z++;
	};


	int result_p = strncmp(cmd_pwm,save,3);
    443c:	000472c0 	call	472c <strncmp>


	if(result_p == 0){
    4440:	10002c1e 	bne	r2,zero,44f4 <uart_isr+0x130>
    4444:	0007883a 	mov	r3,zero



		while(1){

			while(!((IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)&ALTERA_AVALON_UART_STATUS_RRDY_MSK)));
    4448:	01640214 	movui	r5,36872

			rx_data = IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE);
    444c:	01a40014 	movui	r6,36864


			while(!((IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)&ALTERA_AVALON_UART_STATUS_TRDY_MSK)));

			if(rx_data == '\n'){
    4450:	01c00284 	movi	r7,10



		while(1){

			while(!((IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)&ALTERA_AVALON_UART_STATUS_RRDY_MSK)));
    4454:	28800037 	ldwio	r2,0(r5)
    4458:	01240214 	movui	r4,36872
    445c:	1080200c 	andi	r2,r2,128
    4460:	103ffc26 	beq	r2,zero,4454 <_gp+0xffff6e64>

			rx_data = IORD_ALTERA_AVALON_UART_RXDATA(UART_BASE);
    4464:	30800037 	ldwio	r2,0(r6)
    4468:	d0a04205 	stb	r2,-32504(gp)


			while(!((IORD_ALTERA_AVALON_UART_STATUS(UART_BASE)&ALTERA_AVALON_UART_STATUS_TRDY_MSK)));
    446c:	20800037 	ldwio	r2,0(r4)
    4470:	1080100c 	andi	r2,r2,64
    4474:	103ffd26 	beq	r2,zero,446c <_gp+0xffff6e7c>

			if(rx_data == '\n'){
    4478:	d0a04203 	ldbu	r2,-32504(gp)
    447c:	11c00726 	beq	r2,r7,449c <uart_isr+0xd8>
				break;
			};
			perc_in[j] = (int)rx_data - 48;
    4480:	113ff404 	addi	r4,r2,-48
    4484:	18c5883a 	add	r2,r3,r3
    4488:	1085883a 	add	r2,r2,r2
    448c:	d885883a 	add	r2,sp,r2
    4490:	11000015 	stw	r4,0(r2)
			j++;
    4494:	18c00044 	addi	r3,r3,1

		};
    4498:	003fee06 	br	4454 <_gp+0xffff6e64>


		if(j==24){
    449c:	00800604 	movi	r2,24
    44a0:	1880121e 	bne	r3,r2,44ec <uart_isr+0x128>
    44a4:	0025883a 	mov	r18,zero
    44a8:	044000c4 	movi	r17,3
			for(i=0;i<8;i++){
    44ac:	04c006c4 	movi	r19,27
    44b0:	8c3fff44 	addi	r16,r17,-3
    44b4:	0009883a 	mov	r4,zero
				cont = 0;
				for(o=0;o<3;o++){
					cont = perc_in[3*i + o] + cont*10;
    44b8:	8407883a 	add	r3,r16,r16
    44bc:	18c7883a 	add	r3,r3,r3
    44c0:	d8c7883a 	add	r3,sp,r3
    44c4:	1d000017 	ldw	r20,0(r3)
    44c8:	01400284 	movi	r5,10
    44cc:	00045a80 	call	45a8 <__mulsi3>
    44d0:	84000044 	addi	r16,r16,1
    44d4:	a089883a 	add	r4,r20,r2


		if(j==24){
			for(i=0;i<8;i++){
				cont = 0;
				for(o=0;o<3;o++){
    44d8:	8c3ff71e 	bne	r17,r16,44b8 <_gp+0xffff6ec8>
					cont = perc_in[3*i + o] + cont*10;

				}
				data_pwm[i] = cont;
    44dc:	91000015 	stw	r4,0(r18)
    44e0:	8c4000c4 	addi	r17,r17,3
    44e4:	94800104 	addi	r18,r18,4

		};


		if(j==24){
			for(i=0;i<8;i++){
    44e8:	8cfff11e 	bne	r17,r19,44b0 <_gp+0xffff6ec0>

			}

		};

		pwm(data_pwm);
    44ec:	0009883a 	mov	r4,zero
    44f0:	00042e40 	call	42e4 <pwm>
	}
	else{

	};

}
    44f4:	dfc01d17 	ldw	ra,116(sp)
    44f8:	dd001c17 	ldw	r20,112(sp)
    44fc:	dcc01b17 	ldw	r19,108(sp)
    4500:	dc801a17 	ldw	r18,104(sp)
    4504:	dc401917 	ldw	r17,100(sp)
    4508:	dc001817 	ldw	r16,96(sp)
    450c:	dec01e04 	addi	sp,sp,120
    4510:	f800283a 	ret

00004514 <timer_init>:
		};
		pwm_rec = 0x00;
	}
}

void timer_init(){
    4514:	defffe04 	addi	sp,sp,-8
    4518:	dfc00115 	stw	ra,4(sp)
	void* isr_context_ptr = (void*) &timer_isr_context;

	IOWR_ALTERA_AVALON_TIMER_PERIODH(TIMER_0_BASE, 0x02FA);
    451c:	00a40b14 	movui	r2,36908
    4520:	00c0be84 	movi	r3,762
    4524:	10c00035 	stwio	r3,0(r2)
	IOWR_ALTERA_AVALON_TIMER_PERIODL(TIMER_0_BASE, 0xF080);
    4528:	00a40a14 	movui	r2,36904
    452c:	00fc2014 	movui	r3,61568
    4530:	10c00035 	stwio	r3,0(r2)

	IOWR_ALTERA_AVALON_TIMER_CONTROL(TIMER_0_BASE,
    4534:	00a40914 	movui	r2,36900
    4538:	00c001c4 	movi	r3,7
    453c:	10c00035 	stwio	r3,0(r2)
	ALTERA_AVALON_TIMER_CONTROL_START_MSK |
	ALTERA_AVALON_TIMER_CONTROL_CONT_MSK  |
	ALTERA_AVALON_TIMER_CONTROL_ITO_MSK);


	alt_ic_isr_register(
    4540:	01800034 	movhi	r6,0
    4544:	d8000015 	stw	zero,0(sp)
    4548:	d1e04304 	addi	r7,gp,-32500
    454c:	31906f04 	addi	r6,r6,16828
    4550:	01400044 	movi	r5,1
    4554:	0009883a 	mov	r4,zero
    4558:	00050b00 	call	50b0 <alt_ic_isr_register>
	      TIMER_0_IRQ_INTERRUPT_CONTROLLER_ID,
	      TIMER_0_IRQ,
	      freq_isr,
	      isr_context_ptr,
	      0x0);
}
    455c:	dfc00117 	ldw	ra,4(sp)
    4560:	dec00204 	addi	sp,sp,8
    4564:	f800283a 	ret

00004568 <main>:



int main(){
	printf("System Start \n");
    4568:	01000034 	movhi	r4,0
	      0x0);
}



int main(){
    456c:	deffff04 	addi	sp,sp,-4
	printf("System Start \n");
    4570:	21153f04 	addi	r4,r4,21756
	      0x0);
}



int main(){
    4574:	dfc00015 	stw	ra,0(sp)
	printf("System Start \n");
    4578:	00046fc0 	call	46fc <puts>
	printf("***************** \n");
    457c:	01000034 	movhi	r4,0
    4580:	21153904 	addi	r4,r4,21732
    4584:	00046fc0 	call	46fc <puts>
	uart_init();
    4588:	00042a80 	call	42a8 <uart_init>
	timer_init();
    458c:	00045140 	call	4514 <timer_init>
	alt_irq_register(UART_IRQ,NULL,uart_isr);
    4590:	01800034 	movhi	r6,0
    4594:	3190f104 	addi	r6,r6,17348
    4598:	000b883a 	mov	r5,zero
    459c:	0009883a 	mov	r4,zero
    45a0:	00051a40 	call	51a4 <alt_irq_register>
    45a4:	003fff06 	br	45a4 <_gp+0xffff6fb4>

000045a8 <__mulsi3>:
    45a8:	0005883a 	mov	r2,zero
    45ac:	20000726 	beq	r4,zero,45cc <__mulsi3+0x24>
    45b0:	20c0004c 	andi	r3,r4,1
    45b4:	2008d07a 	srli	r4,r4,1
    45b8:	18000126 	beq	r3,zero,45c0 <__mulsi3+0x18>
    45bc:	1145883a 	add	r2,r2,r5
    45c0:	294b883a 	add	r5,r5,r5
    45c4:	203ffa1e 	bne	r4,zero,45b0 <_gp+0xffff6fc0>
    45c8:	f800283a 	ret
    45cc:	f800283a 	ret

000045d0 <_printf_r>:
    45d0:	defffd04 	addi	sp,sp,-12
    45d4:	dfc00015 	stw	ra,0(sp)
    45d8:	d9800115 	stw	r6,4(sp)
    45dc:	d9c00215 	stw	r7,8(sp)
    45e0:	20c00217 	ldw	r3,8(r4)
    45e4:	01800034 	movhi	r6,0
    45e8:	31935004 	addi	r6,r6,19776
    45ec:	19800115 	stw	r6,4(r3)
    45f0:	280d883a 	mov	r6,r5
    45f4:	21400217 	ldw	r5,8(r4)
    45f8:	d9c00104 	addi	r7,sp,4
    45fc:	00047f80 	call	47f8 <___vfprintf_internal_r>
    4600:	dfc00017 	ldw	ra,0(sp)
    4604:	dec00304 	addi	sp,sp,12
    4608:	f800283a 	ret

0000460c <printf>:
    460c:	defffc04 	addi	sp,sp,-16
    4610:	dfc00015 	stw	ra,0(sp)
    4614:	d9400115 	stw	r5,4(sp)
    4618:	d9800215 	stw	r6,8(sp)
    461c:	d9c00315 	stw	r7,12(sp)
    4620:	00800034 	movhi	r2,0
    4624:	10957d04 	addi	r2,r2,22004
    4628:	10800017 	ldw	r2,0(r2)
    462c:	01400034 	movhi	r5,0
    4630:	29535004 	addi	r5,r5,19776
    4634:	10c00217 	ldw	r3,8(r2)
    4638:	d9800104 	addi	r6,sp,4
    463c:	19400115 	stw	r5,4(r3)
    4640:	200b883a 	mov	r5,r4
    4644:	11000217 	ldw	r4,8(r2)
    4648:	0004d240 	call	4d24 <__vfprintf_internal>
    464c:	dfc00017 	ldw	ra,0(sp)
    4650:	dec00404 	addi	sp,sp,16
    4654:	f800283a 	ret

00004658 <_putchar_r>:
    4658:	21800217 	ldw	r6,8(r4)
    465c:	0004e4c1 	jmpi	4e4c <_putc_r>

00004660 <putchar>:
    4660:	00800034 	movhi	r2,0
    4664:	10957d04 	addi	r2,r2,22004
    4668:	10800017 	ldw	r2,0(r2)
    466c:	200b883a 	mov	r5,r4
    4670:	11800217 	ldw	r6,8(r2)
    4674:	1009883a 	mov	r4,r2
    4678:	0004e4c1 	jmpi	4e4c <_putc_r>

0000467c <_puts_r>:
    467c:	defffd04 	addi	sp,sp,-12
    4680:	dc000015 	stw	r16,0(sp)
    4684:	2021883a 	mov	r16,r4
    4688:	2809883a 	mov	r4,r5
    468c:	dfc00215 	stw	ra,8(sp)
    4690:	dc400115 	stw	r17,4(sp)
    4694:	2823883a 	mov	r17,r5
    4698:	00047100 	call	4710 <strlen>
    469c:	81400217 	ldw	r5,8(r16)
    46a0:	01000034 	movhi	r4,0
    46a4:	21135004 	addi	r4,r4,19776
    46a8:	29000115 	stw	r4,4(r5)
    46ac:	100f883a 	mov	r7,r2
    46b0:	880d883a 	mov	r6,r17
    46b4:	8009883a 	mov	r4,r16
    46b8:	0004d400 	call	4d40 <__sfvwrite_small_dev>
    46bc:	00ffffc4 	movi	r3,-1
    46c0:	10c00926 	beq	r2,r3,46e8 <_puts_r+0x6c>
    46c4:	81400217 	ldw	r5,8(r16)
    46c8:	01800034 	movhi	r6,0
    46cc:	01c00044 	movi	r7,1
    46d0:	28800117 	ldw	r2,4(r5)
    46d4:	31954304 	addi	r6,r6,21772
    46d8:	8009883a 	mov	r4,r16
    46dc:	103ee83a 	callr	r2
    46e0:	10bfffe0 	cmpeqi	r2,r2,-1
    46e4:	0085c83a 	sub	r2,zero,r2
    46e8:	dfc00217 	ldw	ra,8(sp)
    46ec:	dc400117 	ldw	r17,4(sp)
    46f0:	dc000017 	ldw	r16,0(sp)
    46f4:	dec00304 	addi	sp,sp,12
    46f8:	f800283a 	ret

000046fc <puts>:
    46fc:	00800034 	movhi	r2,0
    4700:	10957d04 	addi	r2,r2,22004
    4704:	200b883a 	mov	r5,r4
    4708:	11000017 	ldw	r4,0(r2)
    470c:	000467c1 	jmpi	467c <_puts_r>

00004710 <strlen>:
    4710:	2005883a 	mov	r2,r4
    4714:	10c00007 	ldb	r3,0(r2)
    4718:	18000226 	beq	r3,zero,4724 <strlen+0x14>
    471c:	10800044 	addi	r2,r2,1
    4720:	003ffc06 	br	4714 <_gp+0xffff7124>
    4724:	1105c83a 	sub	r2,r2,r4
    4728:	f800283a 	ret

0000472c <strncmp>:
    472c:	30001526 	beq	r6,zero,4784 <strncmp+0x58>
    4730:	31bfffc4 	addi	r6,r6,-1
    4734:	218d883a 	add	r6,r4,r6
    4738:	20800003 	ldbu	r2,0(r4)
    473c:	28c00003 	ldbu	r3,0(r5)
    4740:	11c03fcc 	andi	r7,r2,255
    4744:	1a003fcc 	andi	r8,r3,255
    4748:	39c0201c 	xori	r7,r7,128
    474c:	4200201c 	xori	r8,r8,128
    4750:	39ffe004 	addi	r7,r7,-128
    4754:	423fe004 	addi	r8,r8,-128
    4758:	3a00061e 	bne	r7,r8,4774 <strncmp+0x48>
    475c:	21800426 	beq	r4,r6,4770 <strncmp+0x44>
    4760:	38000326 	beq	r7,zero,4770 <strncmp+0x44>
    4764:	21000044 	addi	r4,r4,1
    4768:	29400044 	addi	r5,r5,1
    476c:	003ff206 	br	4738 <_gp+0xffff7148>
    4770:	1007883a 	mov	r3,r2
    4774:	18c03fcc 	andi	r3,r3,255
    4778:	10803fcc 	andi	r2,r2,255
    477c:	10c5c83a 	sub	r2,r2,r3
    4780:	f800283a 	ret
    4784:	0005883a 	mov	r2,zero
    4788:	f800283a 	ret

0000478c <print_repeat>:
    478c:	defffb04 	addi	sp,sp,-20
    4790:	dc800315 	stw	r18,12(sp)
    4794:	dc400215 	stw	r17,8(sp)
    4798:	dc000115 	stw	r16,4(sp)
    479c:	dfc00415 	stw	ra,16(sp)
    47a0:	2025883a 	mov	r18,r4
    47a4:	2823883a 	mov	r17,r5
    47a8:	d9800005 	stb	r6,0(sp)
    47ac:	3821883a 	mov	r16,r7
    47b0:	04000a0e 	bge	zero,r16,47dc <print_repeat+0x50>
    47b4:	88800117 	ldw	r2,4(r17)
    47b8:	01c00044 	movi	r7,1
    47bc:	d80d883a 	mov	r6,sp
    47c0:	880b883a 	mov	r5,r17
    47c4:	9009883a 	mov	r4,r18
    47c8:	103ee83a 	callr	r2
    47cc:	843fffc4 	addi	r16,r16,-1
    47d0:	103ff726 	beq	r2,zero,47b0 <_gp+0xffff71c0>
    47d4:	00bfffc4 	movi	r2,-1
    47d8:	00000106 	br	47e0 <print_repeat+0x54>
    47dc:	0005883a 	mov	r2,zero
    47e0:	dfc00417 	ldw	ra,16(sp)
    47e4:	dc800317 	ldw	r18,12(sp)
    47e8:	dc400217 	ldw	r17,8(sp)
    47ec:	dc000117 	ldw	r16,4(sp)
    47f0:	dec00504 	addi	sp,sp,20
    47f4:	f800283a 	ret

000047f8 <___vfprintf_internal_r>:
    47f8:	deffe504 	addi	sp,sp,-108
    47fc:	d8c00804 	addi	r3,sp,32
    4800:	ddc01815 	stw	r23,96(sp)
    4804:	dd801715 	stw	r22,92(sp)
    4808:	dd401615 	stw	r21,88(sp)
    480c:	dd001515 	stw	r20,84(sp)
    4810:	dcc01415 	stw	r19,80(sp)
    4814:	dc801315 	stw	r18,76(sp)
    4818:	dc401215 	stw	r17,72(sp)
    481c:	dc001115 	stw	r16,68(sp)
    4820:	dfc01a15 	stw	ra,104(sp)
    4824:	df001915 	stw	fp,100(sp)
    4828:	2029883a 	mov	r20,r4
    482c:	2823883a 	mov	r17,r5
    4830:	382d883a 	mov	r22,r7
    4834:	d9800f15 	stw	r6,60(sp)
    4838:	0021883a 	mov	r16,zero
    483c:	d8000e15 	stw	zero,56(sp)
    4840:	d8000a15 	stw	zero,40(sp)
    4844:	002b883a 	mov	r21,zero
    4848:	0027883a 	mov	r19,zero
    484c:	0025883a 	mov	r18,zero
    4850:	d8000c15 	stw	zero,48(sp)
    4854:	d8000b15 	stw	zero,44(sp)
    4858:	002f883a 	mov	r23,zero
    485c:	d8c00915 	stw	r3,36(sp)
    4860:	d8c00f17 	ldw	r3,60(sp)
    4864:	19000003 	ldbu	r4,0(r3)
    4868:	20803fcc 	andi	r2,r4,255
    486c:	1080201c 	xori	r2,r2,128
    4870:	10bfe004 	addi	r2,r2,-128
    4874:	10011e26 	beq	r2,zero,4cf0 <___vfprintf_internal_r+0x4f8>
    4878:	00c00044 	movi	r3,1
    487c:	b8c01426 	beq	r23,r3,48d0 <___vfprintf_internal_r+0xd8>
    4880:	1dc00216 	blt	r3,r23,488c <___vfprintf_internal_r+0x94>
    4884:	b8000626 	beq	r23,zero,48a0 <___vfprintf_internal_r+0xa8>
    4888:	00011506 	br	4ce0 <___vfprintf_internal_r+0x4e8>
    488c:	01400084 	movi	r5,2
    4890:	b9401d26 	beq	r23,r5,4908 <___vfprintf_internal_r+0x110>
    4894:	014000c4 	movi	r5,3
    4898:	b9402b26 	beq	r23,r5,4948 <___vfprintf_internal_r+0x150>
    489c:	00011006 	br	4ce0 <___vfprintf_internal_r+0x4e8>
    48a0:	01400944 	movi	r5,37
    48a4:	1140fc26 	beq	r2,r5,4c98 <___vfprintf_internal_r+0x4a0>
    48a8:	88800117 	ldw	r2,4(r17)
    48ac:	d9000005 	stb	r4,0(sp)
    48b0:	01c00044 	movi	r7,1
    48b4:	d80d883a 	mov	r6,sp
    48b8:	880b883a 	mov	r5,r17
    48bc:	a009883a 	mov	r4,r20
    48c0:	103ee83a 	callr	r2
    48c4:	1000d81e 	bne	r2,zero,4c28 <___vfprintf_internal_r+0x430>
    48c8:	84000044 	addi	r16,r16,1
    48cc:	00010406 	br	4ce0 <___vfprintf_internal_r+0x4e8>
    48d0:	01400c04 	movi	r5,48
    48d4:	1140fa26 	beq	r2,r5,4cc0 <___vfprintf_internal_r+0x4c8>
    48d8:	01400944 	movi	r5,37
    48dc:	11400a1e 	bne	r2,r5,4908 <___vfprintf_internal_r+0x110>
    48e0:	d8800005 	stb	r2,0(sp)
    48e4:	88800117 	ldw	r2,4(r17)
    48e8:	b80f883a 	mov	r7,r23
    48ec:	d80d883a 	mov	r6,sp
    48f0:	880b883a 	mov	r5,r17
    48f4:	a009883a 	mov	r4,r20
    48f8:	103ee83a 	callr	r2
    48fc:	1000ca1e 	bne	r2,zero,4c28 <___vfprintf_internal_r+0x430>
    4900:	84000044 	addi	r16,r16,1
    4904:	0000f506 	br	4cdc <___vfprintf_internal_r+0x4e4>
    4908:	25fff404 	addi	r23,r4,-48
    490c:	bdc03fcc 	andi	r23,r23,255
    4910:	00c00244 	movi	r3,9
    4914:	1dc00936 	bltu	r3,r23,493c <___vfprintf_internal_r+0x144>
    4918:	00bfffc4 	movi	r2,-1
    491c:	90800426 	beq	r18,r2,4930 <___vfprintf_internal_r+0x138>
    4920:	01400284 	movi	r5,10
    4924:	9009883a 	mov	r4,r18
    4928:	00045a80 	call	45a8 <__mulsi3>
    492c:	00000106 	br	4934 <___vfprintf_internal_r+0x13c>
    4930:	0005883a 	mov	r2,zero
    4934:	b8a5883a 	add	r18,r23,r2
    4938:	0000e206 	br	4cc4 <___vfprintf_internal_r+0x4cc>
    493c:	01400b84 	movi	r5,46
    4940:	1140e426 	beq	r2,r5,4cd4 <___vfprintf_internal_r+0x4dc>
    4944:	05c00084 	movi	r23,2
    4948:	213ff404 	addi	r4,r4,-48
    494c:	27003fcc 	andi	fp,r4,255
    4950:	00c00244 	movi	r3,9
    4954:	1f000936 	bltu	r3,fp,497c <___vfprintf_internal_r+0x184>
    4958:	00bfffc4 	movi	r2,-1
    495c:	98800426 	beq	r19,r2,4970 <___vfprintf_internal_r+0x178>
    4960:	01400284 	movi	r5,10
    4964:	9809883a 	mov	r4,r19
    4968:	00045a80 	call	45a8 <__mulsi3>
    496c:	00000106 	br	4974 <___vfprintf_internal_r+0x17c>
    4970:	0005883a 	mov	r2,zero
    4974:	e0a7883a 	add	r19,fp,r2
    4978:	0000d906 	br	4ce0 <___vfprintf_internal_r+0x4e8>
    497c:	00c01b04 	movi	r3,108
    4980:	10c0d226 	beq	r2,r3,4ccc <___vfprintf_internal_r+0x4d4>
    4984:	013fffc4 	movi	r4,-1
    4988:	99000226 	beq	r19,r4,4994 <___vfprintf_internal_r+0x19c>
    498c:	d8000b15 	stw	zero,44(sp)
    4990:	00000106 	br	4998 <___vfprintf_internal_r+0x1a0>
    4994:	04c00044 	movi	r19,1
    4998:	01001a44 	movi	r4,105
    499c:	11001626 	beq	r2,r4,49f8 <___vfprintf_internal_r+0x200>
    49a0:	20800916 	blt	r4,r2,49c8 <___vfprintf_internal_r+0x1d0>
    49a4:	010018c4 	movi	r4,99
    49a8:	11008826 	beq	r2,r4,4bcc <___vfprintf_internal_r+0x3d4>
    49ac:	01001904 	movi	r4,100
    49b0:	11001126 	beq	r2,r4,49f8 <___vfprintf_internal_r+0x200>
    49b4:	01001604 	movi	r4,88
    49b8:	1100c81e 	bne	r2,r4,4cdc <___vfprintf_internal_r+0x4e4>
    49bc:	00c00044 	movi	r3,1
    49c0:	d8c00e15 	stw	r3,56(sp)
    49c4:	00001506 	br	4a1c <___vfprintf_internal_r+0x224>
    49c8:	01001cc4 	movi	r4,115
    49cc:	11009826 	beq	r2,r4,4c30 <___vfprintf_internal_r+0x438>
    49d0:	20800416 	blt	r4,r2,49e4 <___vfprintf_internal_r+0x1ec>
    49d4:	01001bc4 	movi	r4,111
    49d8:	1100c01e 	bne	r2,r4,4cdc <___vfprintf_internal_r+0x4e4>
    49dc:	05400204 	movi	r21,8
    49e0:	00000f06 	br	4a20 <___vfprintf_internal_r+0x228>
    49e4:	01001d44 	movi	r4,117
    49e8:	11000d26 	beq	r2,r4,4a20 <___vfprintf_internal_r+0x228>
    49ec:	01001e04 	movi	r4,120
    49f0:	11000a26 	beq	r2,r4,4a1c <___vfprintf_internal_r+0x224>
    49f4:	0000b906 	br	4cdc <___vfprintf_internal_r+0x4e4>
    49f8:	d8c00a17 	ldw	r3,40(sp)
    49fc:	b7000104 	addi	fp,r22,4
    4a00:	18000726 	beq	r3,zero,4a20 <___vfprintf_internal_r+0x228>
    4a04:	df000d15 	stw	fp,52(sp)
    4a08:	b5c00017 	ldw	r23,0(r22)
    4a0c:	b800080e 	bge	r23,zero,4a30 <___vfprintf_internal_r+0x238>
    4a10:	05efc83a 	sub	r23,zero,r23
    4a14:	02400044 	movi	r9,1
    4a18:	00000606 	br	4a34 <___vfprintf_internal_r+0x23c>
    4a1c:	05400404 	movi	r21,16
    4a20:	b0c00104 	addi	r3,r22,4
    4a24:	d8c00d15 	stw	r3,52(sp)
    4a28:	b5c00017 	ldw	r23,0(r22)
    4a2c:	d8000a15 	stw	zero,40(sp)
    4a30:	0013883a 	mov	r9,zero
    4a34:	d839883a 	mov	fp,sp
    4a38:	b8001726 	beq	r23,zero,4a98 <___vfprintf_internal_r+0x2a0>
    4a3c:	a80b883a 	mov	r5,r21
    4a40:	b809883a 	mov	r4,r23
    4a44:	da401015 	stw	r9,64(sp)
    4a48:	0004ff40 	call	4ff4 <__udivsi3>
    4a4c:	a80b883a 	mov	r5,r21
    4a50:	1009883a 	mov	r4,r2
    4a54:	102d883a 	mov	r22,r2
    4a58:	00045a80 	call	45a8 <__mulsi3>
    4a5c:	b885c83a 	sub	r2,r23,r2
    4a60:	00c00244 	movi	r3,9
    4a64:	da401017 	ldw	r9,64(sp)
    4a68:	18800216 	blt	r3,r2,4a74 <___vfprintf_internal_r+0x27c>
    4a6c:	10800c04 	addi	r2,r2,48
    4a70:	00000506 	br	4a88 <___vfprintf_internal_r+0x290>
    4a74:	d8c00e17 	ldw	r3,56(sp)
    4a78:	18000226 	beq	r3,zero,4a84 <___vfprintf_internal_r+0x28c>
    4a7c:	10800dc4 	addi	r2,r2,55
    4a80:	00000106 	br	4a88 <___vfprintf_internal_r+0x290>
    4a84:	108015c4 	addi	r2,r2,87
    4a88:	e0800005 	stb	r2,0(fp)
    4a8c:	b02f883a 	mov	r23,r22
    4a90:	e7000044 	addi	fp,fp,1
    4a94:	003fe806 	br	4a38 <_gp+0xffff7448>
    4a98:	e6efc83a 	sub	r23,fp,sp
    4a9c:	9dc5c83a 	sub	r2,r19,r23
    4aa0:	0080090e 	bge	zero,r2,4ac8 <___vfprintf_internal_r+0x2d0>
    4aa4:	e085883a 	add	r2,fp,r2
    4aa8:	01400c04 	movi	r5,48
    4aac:	d8c00917 	ldw	r3,36(sp)
    4ab0:	e009883a 	mov	r4,fp
    4ab4:	e0c0032e 	bgeu	fp,r3,4ac4 <___vfprintf_internal_r+0x2cc>
    4ab8:	e7000044 	addi	fp,fp,1
    4abc:	21400005 	stb	r5,0(r4)
    4ac0:	e0bffa1e 	bne	fp,r2,4aac <_gp+0xffff74bc>
    4ac4:	e6efc83a 	sub	r23,fp,sp
    4ac8:	d8c00b17 	ldw	r3,44(sp)
    4acc:	4dd1883a 	add	r8,r9,r23
    4ad0:	922dc83a 	sub	r22,r18,r8
    4ad4:	18001626 	beq	r3,zero,4b30 <___vfprintf_internal_r+0x338>
    4ad8:	48000a26 	beq	r9,zero,4b04 <___vfprintf_internal_r+0x30c>
    4adc:	00800b44 	movi	r2,45
    4ae0:	d8800805 	stb	r2,32(sp)
    4ae4:	88800117 	ldw	r2,4(r17)
    4ae8:	01c00044 	movi	r7,1
    4aec:	d9800804 	addi	r6,sp,32
    4af0:	880b883a 	mov	r5,r17
    4af4:	a009883a 	mov	r4,r20
    4af8:	103ee83a 	callr	r2
    4afc:	10004a1e 	bne	r2,zero,4c28 <___vfprintf_internal_r+0x430>
    4b00:	84000044 	addi	r16,r16,1
    4b04:	0580070e 	bge	zero,r22,4b24 <___vfprintf_internal_r+0x32c>
    4b08:	b00f883a 	mov	r7,r22
    4b0c:	01800c04 	movi	r6,48
    4b10:	880b883a 	mov	r5,r17
    4b14:	a009883a 	mov	r4,r20
    4b18:	000478c0 	call	478c <print_repeat>
    4b1c:	1000421e 	bne	r2,zero,4c28 <___vfprintf_internal_r+0x430>
    4b20:	85a1883a 	add	r16,r16,r22
    4b24:	e02d883a 	mov	r22,fp
    4b28:	bf2fc83a 	sub	r23,r23,fp
    4b2c:	00002006 	br	4bb0 <___vfprintf_internal_r+0x3b8>
    4b30:	0580090e 	bge	zero,r22,4b58 <___vfprintf_internal_r+0x360>
    4b34:	b00f883a 	mov	r7,r22
    4b38:	01800804 	movi	r6,32
    4b3c:	880b883a 	mov	r5,r17
    4b40:	a009883a 	mov	r4,r20
    4b44:	da401015 	stw	r9,64(sp)
    4b48:	000478c0 	call	478c <print_repeat>
    4b4c:	da401017 	ldw	r9,64(sp)
    4b50:	1000351e 	bne	r2,zero,4c28 <___vfprintf_internal_r+0x430>
    4b54:	85a1883a 	add	r16,r16,r22
    4b58:	483ff226 	beq	r9,zero,4b24 <_gp+0xffff7534>
    4b5c:	00800b44 	movi	r2,45
    4b60:	d8800805 	stb	r2,32(sp)
    4b64:	88800117 	ldw	r2,4(r17)
    4b68:	01c00044 	movi	r7,1
    4b6c:	d9800804 	addi	r6,sp,32
    4b70:	880b883a 	mov	r5,r17
    4b74:	a009883a 	mov	r4,r20
    4b78:	103ee83a 	callr	r2
    4b7c:	10002a1e 	bne	r2,zero,4c28 <___vfprintf_internal_r+0x430>
    4b80:	84000044 	addi	r16,r16,1
    4b84:	003fe706 	br	4b24 <_gp+0xffff7534>
    4b88:	b5bfffc4 	addi	r22,r22,-1
    4b8c:	b0800003 	ldbu	r2,0(r22)
    4b90:	01c00044 	movi	r7,1
    4b94:	d9800804 	addi	r6,sp,32
    4b98:	d8800805 	stb	r2,32(sp)
    4b9c:	88800117 	ldw	r2,4(r17)
    4ba0:	880b883a 	mov	r5,r17
    4ba4:	a009883a 	mov	r4,r20
    4ba8:	103ee83a 	callr	r2
    4bac:	10001e1e 	bne	r2,zero,4c28 <___vfprintf_internal_r+0x430>
    4bb0:	8585c83a 	sub	r2,r16,r22
    4bb4:	b5c9883a 	add	r4,r22,r23
    4bb8:	e085883a 	add	r2,fp,r2
    4bbc:	013ff216 	blt	zero,r4,4b88 <_gp+0xffff7598>
    4bc0:	1021883a 	mov	r16,r2
    4bc4:	dd800d17 	ldw	r22,52(sp)
    4bc8:	00004406 	br	4cdc <___vfprintf_internal_r+0x4e4>
    4bcc:	00800044 	movi	r2,1
    4bd0:	1480080e 	bge	r2,r18,4bf4 <___vfprintf_internal_r+0x3fc>
    4bd4:	95ffffc4 	addi	r23,r18,-1
    4bd8:	b80f883a 	mov	r7,r23
    4bdc:	01800804 	movi	r6,32
    4be0:	880b883a 	mov	r5,r17
    4be4:	a009883a 	mov	r4,r20
    4be8:	000478c0 	call	478c <print_repeat>
    4bec:	10000e1e 	bne	r2,zero,4c28 <___vfprintf_internal_r+0x430>
    4bf0:	85e1883a 	add	r16,r16,r23
    4bf4:	b0800017 	ldw	r2,0(r22)
    4bf8:	01c00044 	movi	r7,1
    4bfc:	d80d883a 	mov	r6,sp
    4c00:	d8800005 	stb	r2,0(sp)
    4c04:	88800117 	ldw	r2,4(r17)
    4c08:	880b883a 	mov	r5,r17
    4c0c:	a009883a 	mov	r4,r20
    4c10:	b5c00104 	addi	r23,r22,4
    4c14:	103ee83a 	callr	r2
    4c18:	1000031e 	bne	r2,zero,4c28 <___vfprintf_internal_r+0x430>
    4c1c:	84000044 	addi	r16,r16,1
    4c20:	b82d883a 	mov	r22,r23
    4c24:	00002d06 	br	4cdc <___vfprintf_internal_r+0x4e4>
    4c28:	00bfffc4 	movi	r2,-1
    4c2c:	00003106 	br	4cf4 <___vfprintf_internal_r+0x4fc>
    4c30:	b5c00017 	ldw	r23,0(r22)
    4c34:	b7000104 	addi	fp,r22,4
    4c38:	b809883a 	mov	r4,r23
    4c3c:	00047100 	call	4710 <strlen>
    4c40:	9091c83a 	sub	r8,r18,r2
    4c44:	102d883a 	mov	r22,r2
    4c48:	0200090e 	bge	zero,r8,4c70 <___vfprintf_internal_r+0x478>
    4c4c:	400f883a 	mov	r7,r8
    4c50:	01800804 	movi	r6,32
    4c54:	880b883a 	mov	r5,r17
    4c58:	a009883a 	mov	r4,r20
    4c5c:	da001015 	stw	r8,64(sp)
    4c60:	000478c0 	call	478c <print_repeat>
    4c64:	da001017 	ldw	r8,64(sp)
    4c68:	103fef1e 	bne	r2,zero,4c28 <_gp+0xffff7638>
    4c6c:	8221883a 	add	r16,r16,r8
    4c70:	88800117 	ldw	r2,4(r17)
    4c74:	b00f883a 	mov	r7,r22
    4c78:	b80d883a 	mov	r6,r23
    4c7c:	880b883a 	mov	r5,r17
    4c80:	a009883a 	mov	r4,r20
    4c84:	103ee83a 	callr	r2
    4c88:	103fe71e 	bne	r2,zero,4c28 <_gp+0xffff7638>
    4c8c:	85a1883a 	add	r16,r16,r22
    4c90:	e02d883a 	mov	r22,fp
    4c94:	00001106 	br	4cdc <___vfprintf_internal_r+0x4e4>
    4c98:	00c00044 	movi	r3,1
    4c9c:	04ffffc4 	movi	r19,-1
    4ca0:	d8000e15 	stw	zero,56(sp)
    4ca4:	d8c00a15 	stw	r3,40(sp)
    4ca8:	05400284 	movi	r21,10
    4cac:	9825883a 	mov	r18,r19
    4cb0:	d8000c15 	stw	zero,48(sp)
    4cb4:	d8000b15 	stw	zero,44(sp)
    4cb8:	182f883a 	mov	r23,r3
    4cbc:	00000806 	br	4ce0 <___vfprintf_internal_r+0x4e8>
    4cc0:	ddc00b15 	stw	r23,44(sp)
    4cc4:	05c00084 	movi	r23,2
    4cc8:	00000506 	br	4ce0 <___vfprintf_internal_r+0x4e8>
    4ccc:	00c00044 	movi	r3,1
    4cd0:	d8c00c15 	stw	r3,48(sp)
    4cd4:	05c000c4 	movi	r23,3
    4cd8:	00000106 	br	4ce0 <___vfprintf_internal_r+0x4e8>
    4cdc:	002f883a 	mov	r23,zero
    4ce0:	d8c00f17 	ldw	r3,60(sp)
    4ce4:	18c00044 	addi	r3,r3,1
    4ce8:	d8c00f15 	stw	r3,60(sp)
    4cec:	003edc06 	br	4860 <_gp+0xffff7270>
    4cf0:	8005883a 	mov	r2,r16
    4cf4:	dfc01a17 	ldw	ra,104(sp)
    4cf8:	df001917 	ldw	fp,100(sp)
    4cfc:	ddc01817 	ldw	r23,96(sp)
    4d00:	dd801717 	ldw	r22,92(sp)
    4d04:	dd401617 	ldw	r21,88(sp)
    4d08:	dd001517 	ldw	r20,84(sp)
    4d0c:	dcc01417 	ldw	r19,80(sp)
    4d10:	dc801317 	ldw	r18,76(sp)
    4d14:	dc401217 	ldw	r17,72(sp)
    4d18:	dc001117 	ldw	r16,68(sp)
    4d1c:	dec01b04 	addi	sp,sp,108
    4d20:	f800283a 	ret

00004d24 <__vfprintf_internal>:
    4d24:	00800034 	movhi	r2,0
    4d28:	10957d04 	addi	r2,r2,22004
    4d2c:	300f883a 	mov	r7,r6
    4d30:	280d883a 	mov	r6,r5
    4d34:	200b883a 	mov	r5,r4
    4d38:	11000017 	ldw	r4,0(r2)
    4d3c:	00047f81 	jmpi	47f8 <___vfprintf_internal_r>

00004d40 <__sfvwrite_small_dev>:
    4d40:	2880000b 	ldhu	r2,0(r5)
    4d44:	1080020c 	andi	r2,r2,8
    4d48:	10002126 	beq	r2,zero,4dd0 <__sfvwrite_small_dev+0x90>
    4d4c:	2880008f 	ldh	r2,2(r5)
    4d50:	defffa04 	addi	sp,sp,-24
    4d54:	dc000015 	stw	r16,0(sp)
    4d58:	dfc00515 	stw	ra,20(sp)
    4d5c:	dd000415 	stw	r20,16(sp)
    4d60:	dcc00315 	stw	r19,12(sp)
    4d64:	dc800215 	stw	r18,8(sp)
    4d68:	dc400115 	stw	r17,4(sp)
    4d6c:	2821883a 	mov	r16,r5
    4d70:	10001216 	blt	r2,zero,4dbc <__sfvwrite_small_dev+0x7c>
    4d74:	2027883a 	mov	r19,r4
    4d78:	3025883a 	mov	r18,r6
    4d7c:	3823883a 	mov	r17,r7
    4d80:	05010004 	movi	r20,1024
    4d84:	04400b0e 	bge	zero,r17,4db4 <__sfvwrite_small_dev+0x74>
    4d88:	880f883a 	mov	r7,r17
    4d8c:	a440010e 	bge	r20,r17,4d94 <__sfvwrite_small_dev+0x54>
    4d90:	01c10004 	movi	r7,1024
    4d94:	8140008f 	ldh	r5,2(r16)
    4d98:	900d883a 	mov	r6,r18
    4d9c:	9809883a 	mov	r4,r19
    4da0:	0004ea40 	call	4ea4 <_write_r>
    4da4:	0080050e 	bge	zero,r2,4dbc <__sfvwrite_small_dev+0x7c>
    4da8:	88a3c83a 	sub	r17,r17,r2
    4dac:	90a5883a 	add	r18,r18,r2
    4db0:	003ff406 	br	4d84 <_gp+0xffff7794>
    4db4:	0005883a 	mov	r2,zero
    4db8:	00000706 	br	4dd8 <__sfvwrite_small_dev+0x98>
    4dbc:	8080000b 	ldhu	r2,0(r16)
    4dc0:	10801014 	ori	r2,r2,64
    4dc4:	8080000d 	sth	r2,0(r16)
    4dc8:	00bfffc4 	movi	r2,-1
    4dcc:	00000206 	br	4dd8 <__sfvwrite_small_dev+0x98>
    4dd0:	00bfffc4 	movi	r2,-1
    4dd4:	f800283a 	ret
    4dd8:	dfc00517 	ldw	ra,20(sp)
    4ddc:	dd000417 	ldw	r20,16(sp)
    4de0:	dcc00317 	ldw	r19,12(sp)
    4de4:	dc800217 	ldw	r18,8(sp)
    4de8:	dc400117 	ldw	r17,4(sp)
    4dec:	dc000017 	ldw	r16,0(sp)
    4df0:	dec00604 	addi	sp,sp,24
    4df4:	f800283a 	ret

00004df8 <putc>:
    4df8:	defffd04 	addi	sp,sp,-12
    4dfc:	00800034 	movhi	r2,0
    4e00:	dc000115 	stw	r16,4(sp)
    4e04:	dfc00215 	stw	ra,8(sp)
    4e08:	10935004 	addi	r2,r2,19776
    4e0c:	28800115 	stw	r2,4(r5)
    4e10:	00800034 	movhi	r2,0
    4e14:	10957d04 	addi	r2,r2,22004
    4e18:	d9000005 	stb	r4,0(sp)
    4e1c:	2021883a 	mov	r16,r4
    4e20:	11000017 	ldw	r4,0(r2)
    4e24:	01c00044 	movi	r7,1
    4e28:	d80d883a 	mov	r6,sp
    4e2c:	0004d400 	call	4d40 <__sfvwrite_small_dev>
    4e30:	00ffffc4 	movi	r3,-1
    4e34:	10c00126 	beq	r2,r3,4e3c <putc+0x44>
    4e38:	8005883a 	mov	r2,r16
    4e3c:	dfc00217 	ldw	ra,8(sp)
    4e40:	dc000117 	ldw	r16,4(sp)
    4e44:	dec00304 	addi	sp,sp,12
    4e48:	f800283a 	ret

00004e4c <_putc_r>:
    4e4c:	defffd04 	addi	sp,sp,-12
    4e50:	00800034 	movhi	r2,0
    4e54:	dc000115 	stw	r16,4(sp)
    4e58:	dfc00215 	stw	ra,8(sp)
    4e5c:	10935004 	addi	r2,r2,19776
    4e60:	30800115 	stw	r2,4(r6)
    4e64:	00800034 	movhi	r2,0
    4e68:	10957d04 	addi	r2,r2,22004
    4e6c:	11000017 	ldw	r4,0(r2)
    4e70:	2821883a 	mov	r16,r5
    4e74:	01c00044 	movi	r7,1
    4e78:	300b883a 	mov	r5,r6
    4e7c:	d80d883a 	mov	r6,sp
    4e80:	dc000005 	stb	r16,0(sp)
    4e84:	0004d400 	call	4d40 <__sfvwrite_small_dev>
    4e88:	00ffffc4 	movi	r3,-1
    4e8c:	10c00126 	beq	r2,r3,4e94 <_putc_r+0x48>
    4e90:	8005883a 	mov	r2,r16
    4e94:	dfc00217 	ldw	ra,8(sp)
    4e98:	dc000117 	ldw	r16,4(sp)
    4e9c:	dec00304 	addi	sp,sp,12
    4ea0:	f800283a 	ret

00004ea4 <_write_r>:
    4ea4:	defffd04 	addi	sp,sp,-12
    4ea8:	dc000015 	stw	r16,0(sp)
    4eac:	04000034 	movhi	r16,0
    4eb0:	dc400115 	stw	r17,4(sp)
    4eb4:	8415c004 	addi	r16,r16,22272
    4eb8:	2023883a 	mov	r17,r4
    4ebc:	2809883a 	mov	r4,r5
    4ec0:	300b883a 	mov	r5,r6
    4ec4:	380d883a 	mov	r6,r7
    4ec8:	dfc00215 	stw	ra,8(sp)
    4ecc:	80000015 	stw	zero,0(r16)
    4ed0:	00053440 	call	5344 <write>
    4ed4:	00ffffc4 	movi	r3,-1
    4ed8:	10c0031e 	bne	r2,r3,4ee8 <_write_r+0x44>
    4edc:	80c00017 	ldw	r3,0(r16)
    4ee0:	18000126 	beq	r3,zero,4ee8 <_write_r+0x44>
    4ee4:	88c00015 	stw	r3,0(r17)
    4ee8:	dfc00217 	ldw	ra,8(sp)
    4eec:	dc400117 	ldw	r17,4(sp)
    4ef0:	dc000017 	ldw	r16,0(sp)
    4ef4:	dec00304 	addi	sp,sp,12
    4ef8:	f800283a 	ret

00004efc <__divsi3>:
    4efc:	20001b16 	blt	r4,zero,4f6c <__divsi3+0x70>
    4f00:	000f883a 	mov	r7,zero
    4f04:	28001616 	blt	r5,zero,4f60 <__divsi3+0x64>
    4f08:	200d883a 	mov	r6,r4
    4f0c:	29001a2e 	bgeu	r5,r4,4f78 <__divsi3+0x7c>
    4f10:	00800804 	movi	r2,32
    4f14:	00c00044 	movi	r3,1
    4f18:	00000106 	br	4f20 <__divsi3+0x24>
    4f1c:	10000d26 	beq	r2,zero,4f54 <__divsi3+0x58>
    4f20:	294b883a 	add	r5,r5,r5
    4f24:	10bfffc4 	addi	r2,r2,-1
    4f28:	18c7883a 	add	r3,r3,r3
    4f2c:	293ffb36 	bltu	r5,r4,4f1c <_gp+0xffff792c>
    4f30:	0005883a 	mov	r2,zero
    4f34:	18000726 	beq	r3,zero,4f54 <__divsi3+0x58>
    4f38:	0005883a 	mov	r2,zero
    4f3c:	31400236 	bltu	r6,r5,4f48 <__divsi3+0x4c>
    4f40:	314dc83a 	sub	r6,r6,r5
    4f44:	10c4b03a 	or	r2,r2,r3
    4f48:	1806d07a 	srli	r3,r3,1
    4f4c:	280ad07a 	srli	r5,r5,1
    4f50:	183ffa1e 	bne	r3,zero,4f3c <_gp+0xffff794c>
    4f54:	38000126 	beq	r7,zero,4f5c <__divsi3+0x60>
    4f58:	0085c83a 	sub	r2,zero,r2
    4f5c:	f800283a 	ret
    4f60:	014bc83a 	sub	r5,zero,r5
    4f64:	39c0005c 	xori	r7,r7,1
    4f68:	003fe706 	br	4f08 <_gp+0xffff7918>
    4f6c:	0109c83a 	sub	r4,zero,r4
    4f70:	01c00044 	movi	r7,1
    4f74:	003fe306 	br	4f04 <_gp+0xffff7914>
    4f78:	00c00044 	movi	r3,1
    4f7c:	003fee06 	br	4f38 <_gp+0xffff7948>

00004f80 <__modsi3>:
    4f80:	20001716 	blt	r4,zero,4fe0 <__modsi3+0x60>
    4f84:	000f883a 	mov	r7,zero
    4f88:	2005883a 	mov	r2,r4
    4f8c:	28001216 	blt	r5,zero,4fd8 <__modsi3+0x58>
    4f90:	2900162e 	bgeu	r5,r4,4fec <__modsi3+0x6c>
    4f94:	01800804 	movi	r6,32
    4f98:	00c00044 	movi	r3,1
    4f9c:	00000106 	br	4fa4 <__modsi3+0x24>
    4fa0:	30000a26 	beq	r6,zero,4fcc <__modsi3+0x4c>
    4fa4:	294b883a 	add	r5,r5,r5
    4fa8:	31bfffc4 	addi	r6,r6,-1
    4fac:	18c7883a 	add	r3,r3,r3
    4fb0:	293ffb36 	bltu	r5,r4,4fa0 <_gp+0xffff79b0>
    4fb4:	18000526 	beq	r3,zero,4fcc <__modsi3+0x4c>
    4fb8:	1806d07a 	srli	r3,r3,1
    4fbc:	11400136 	bltu	r2,r5,4fc4 <__modsi3+0x44>
    4fc0:	1145c83a 	sub	r2,r2,r5
    4fc4:	280ad07a 	srli	r5,r5,1
    4fc8:	183ffb1e 	bne	r3,zero,4fb8 <_gp+0xffff79c8>
    4fcc:	38000126 	beq	r7,zero,4fd4 <__modsi3+0x54>
    4fd0:	0085c83a 	sub	r2,zero,r2
    4fd4:	f800283a 	ret
    4fd8:	014bc83a 	sub	r5,zero,r5
    4fdc:	003fec06 	br	4f90 <_gp+0xffff79a0>
    4fe0:	0109c83a 	sub	r4,zero,r4
    4fe4:	01c00044 	movi	r7,1
    4fe8:	003fe706 	br	4f88 <_gp+0xffff7998>
    4fec:	00c00044 	movi	r3,1
    4ff0:	003ff106 	br	4fb8 <_gp+0xffff79c8>

00004ff4 <__udivsi3>:
    4ff4:	200d883a 	mov	r6,r4
    4ff8:	2900152e 	bgeu	r5,r4,5050 <__udivsi3+0x5c>
    4ffc:	28001416 	blt	r5,zero,5050 <__udivsi3+0x5c>
    5000:	00800804 	movi	r2,32
    5004:	00c00044 	movi	r3,1
    5008:	00000206 	br	5014 <__udivsi3+0x20>
    500c:	10000e26 	beq	r2,zero,5048 <__udivsi3+0x54>
    5010:	28000516 	blt	r5,zero,5028 <__udivsi3+0x34>
    5014:	294b883a 	add	r5,r5,r5
    5018:	10bfffc4 	addi	r2,r2,-1
    501c:	18c7883a 	add	r3,r3,r3
    5020:	293ffa36 	bltu	r5,r4,500c <_gp+0xffff7a1c>
    5024:	18000826 	beq	r3,zero,5048 <__udivsi3+0x54>
    5028:	0005883a 	mov	r2,zero
    502c:	31400236 	bltu	r6,r5,5038 <__udivsi3+0x44>
    5030:	314dc83a 	sub	r6,r6,r5
    5034:	10c4b03a 	or	r2,r2,r3
    5038:	1806d07a 	srli	r3,r3,1
    503c:	280ad07a 	srli	r5,r5,1
    5040:	183ffa1e 	bne	r3,zero,502c <_gp+0xffff7a3c>
    5044:	f800283a 	ret
    5048:	0005883a 	mov	r2,zero
    504c:	f800283a 	ret
    5050:	00c00044 	movi	r3,1
    5054:	003ff406 	br	5028 <_gp+0xffff7a38>

00005058 <__umodsi3>:
    5058:	2005883a 	mov	r2,r4
    505c:	2900122e 	bgeu	r5,r4,50a8 <__umodsi3+0x50>
    5060:	28001116 	blt	r5,zero,50a8 <__umodsi3+0x50>
    5064:	01800804 	movi	r6,32
    5068:	00c00044 	movi	r3,1
    506c:	00000206 	br	5078 <__umodsi3+0x20>
    5070:	30000c26 	beq	r6,zero,50a4 <__umodsi3+0x4c>
    5074:	28000516 	blt	r5,zero,508c <__umodsi3+0x34>
    5078:	294b883a 	add	r5,r5,r5
    507c:	31bfffc4 	addi	r6,r6,-1
    5080:	18c7883a 	add	r3,r3,r3
    5084:	293ffa36 	bltu	r5,r4,5070 <_gp+0xffff7a80>
    5088:	18000626 	beq	r3,zero,50a4 <__umodsi3+0x4c>
    508c:	1806d07a 	srli	r3,r3,1
    5090:	11400136 	bltu	r2,r5,5098 <__umodsi3+0x40>
    5094:	1145c83a 	sub	r2,r2,r5
    5098:	280ad07a 	srli	r5,r5,1
    509c:	183ffb1e 	bne	r3,zero,508c <_gp+0xffff7a9c>
    50a0:	f800283a 	ret
    50a4:	f800283a 	ret
    50a8:	00c00044 	movi	r3,1
    50ac:	003ff706 	br	508c <_gp+0xffff7a9c>

000050b0 <alt_ic_isr_register>:
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    return alt_iic_isr_register(ic_id, irq, isr, isr_context, flags);
    50b0:	000513c1 	jmpi	513c <alt_iic_isr_register>

000050b4 <alt_ic_irq_enable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    50b4:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    50b8:	00bfff84 	movi	r2,-2
    50bc:	2084703a 	and	r2,r4,r2
    50c0:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    50c4:	00c00044 	movi	r3,1
    50c8:	d0a04517 	ldw	r2,-32492(gp)
    50cc:	194a983a 	sll	r5,r3,r5
    50d0:	288ab03a 	or	r5,r5,r2
    50d4:	d1604515 	stw	r5,-32492(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    50d8:	d0a04517 	ldw	r2,-32492(gp)
    50dc:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    50e0:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_enable (alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_enable(irq);
}
    50e4:	0005883a 	mov	r2,zero
    50e8:	f800283a 	ret

000050ec <alt_ic_irq_disable>:
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    50ec:	0009303a 	rdctl	r4,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    50f0:	00bfff84 	movi	r2,-2
    50f4:	2084703a 	and	r2,r4,r2
    50f8:	1001703a 	wrctl	status,r2
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    50fc:	00ffff84 	movi	r3,-2
    5100:	d0a04517 	ldw	r2,-32492(gp)
    5104:	194a183a 	rol	r5,r3,r5
    5108:	288a703a 	and	r5,r5,r2
    510c:	d1604515 	stw	r5,-32492(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    5110:	d0a04517 	ldw	r2,-32492(gp)
    5114:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5118:	2001703a 	wrctl	status,r4
  * @return                 0 if successful, else error (-1)
  */
int alt_ic_irq_disable(alt_u32 ic_id, alt_u32 irq)
{
    return alt_irq_disable(irq);
}
    511c:	0005883a 	mov	r2,zero
    5120:	f800283a 	ret

00005124 <alt_ic_irq_enabled>:
  */
alt_u32 alt_ic_irq_enabled(alt_u32 ic_id, alt_u32 irq)
{
    alt_u32 irq_enabled;

    NIOS2_READ_IENABLE(irq_enabled);
    5124:	000730fa 	rdctl	r3,ienable

    return (irq_enabled & (1 << irq)) ? 1: 0;
    5128:	00800044 	movi	r2,1
    512c:	1144983a 	sll	r2,r2,r5
    5130:	10c4703a 	and	r2,r2,r3
}
    5134:	1004c03a 	cmpne	r2,r2,zero
    5138:	f800283a 	ret

0000513c <alt_iic_isr_register>:
{
  int rc = -EINVAL;  
  int id = irq;             /* IRQ interpreted as the interrupt ID. */
  alt_irq_context status;

  if (id < ALT_NIRQ)
    513c:	00c007c4 	movi	r3,31
    5140:	19401616 	blt	r3,r5,519c <alt_iic_isr_register+0x60>
  * @param flags            
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
    5144:	defffe04 	addi	sp,sp,-8
    5148:	dfc00115 	stw	ra,4(sp)
    514c:	dc000015 	stw	r16,0(sp)
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    5150:	0021303a 	rdctl	r16,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    5154:	00ffff84 	movi	r3,-2
    5158:	80c6703a 	and	r3,r16,r3
    515c:	1801703a 	wrctl	status,r3
     * state.
     */

    status = alt_irq_disable_all();

    alt_irq[id].handler = isr;
    5160:	280490fa 	slli	r2,r5,3
    5164:	00c00034 	movhi	r3,0
    5168:	18d5c604 	addi	r3,r3,22296
    516c:	1885883a 	add	r2,r3,r2
    5170:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = isr_context;
    5174:	11c00115 	stw	r7,4(r2)

    rc = (isr) ? alt_ic_irq_enable(ic_id, id) : alt_ic_irq_disable(ic_id, id);
    5178:	30000226 	beq	r6,zero,5184 <alt_iic_isr_register+0x48>
    517c:	00050b40 	call	50b4 <alt_ic_irq_enable>
    5180:	00000106 	br	5188 <alt_iic_isr_register+0x4c>
    5184:	00050ec0 	call	50ec <alt_ic_irq_disable>
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5188:	8001703a 	wrctl	status,r16

    alt_irq_enable_all(status);
  }

  return rc; 
}
    518c:	dfc00117 	ldw	ra,4(sp)
    5190:	dc000017 	ldw	r16,0(sp)
    5194:	dec00204 	addi	sp,sp,8
    5198:	f800283a 	ret
  * @return                 0 if successful, else error (-1)
  */
int alt_iic_isr_register(alt_u32 ic_id, alt_u32 irq, alt_isr_func isr, 
  void *isr_context, void *flags)
{
  int rc = -EINVAL;  
    519c:	00bffa84 	movi	r2,-22
    51a0:	f800283a 	ret

000051a4 <alt_irq_register>:
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
  alt_irq_context status;

  if (id < ALT_NIRQ)
    51a4:	008007c4 	movi	r2,31
    51a8:	11002136 	bltu	r2,r4,5230 <alt_irq_register+0x8c>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    51ac:	000f303a 	rdctl	r7,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    51b0:	00ffff84 	movi	r3,-2
    51b4:	38c4703a 	and	r2,r7,r3
    51b8:	1001703a 	wrctl	status,r2
     * state.
     */

    status = alt_irq_disable_all ();

    alt_irq[id].handler = handler;
    51bc:	200490fa 	slli	r2,r4,3
    51c0:	02000034 	movhi	r8,0
    51c4:	4215c604 	addi	r8,r8,22296
    51c8:	4085883a 	add	r2,r8,r2
    51cc:	11800015 	stw	r6,0(r2)
    alt_irq[id].context = context;
    51d0:	11400115 	stw	r5,4(r2)
    51d4:	00800044 	movi	r2,1

    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);
    51d8:	30000726 	beq	r6,zero,51f8 <alt_irq_register+0x54>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    51dc:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    51e0:	28c6703a 	and	r3,r5,r3
    51e4:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active |= (1 << id);
    51e8:	d0e04517 	ldw	r3,-32492(gp)
    51ec:	1104983a 	sll	r2,r2,r4
    51f0:	10c4b03a 	or	r2,r2,r3
    51f4:	00000706 	br	5214 <alt_irq_register+0x70>
static ALT_INLINE alt_irq_context ALT_ALWAYS_INLINE 
       alt_irq_disable_all (void)
{
  alt_irq_context context;

  NIOS2_READ_STATUS (context);
    51f8:	000b303a 	rdctl	r5,status

  NIOS2_WRITE_STATUS (context & ~NIOS2_STATUS_PIE_MSK);
    51fc:	28c6703a 	and	r3,r5,r3
    5200:	1801703a 	wrctl	status,r3
  alt_irq_context  status;
  extern volatile alt_u32 alt_irq_active;

  status = alt_irq_disable_all ();

  alt_irq_active &= ~(1 << id);
    5204:	1104983a 	sll	r2,r2,r4
    5208:	d0e04517 	ldw	r3,-32492(gp)
    520c:	0084303a 	nor	r2,zero,r2
    5210:	10c4703a 	and	r2,r2,r3
    5214:	d0a04515 	stw	r2,-32492(gp)
  NIOS2_WRITE_IENABLE (alt_irq_active);
    5218:	d0a04517 	ldw	r2,-32492(gp)
    521c:	100170fa 	wrctl	ienable,r2
  status &= ~NIOS2_STATUS_PIE_MSK;
  status |= (context & NIOS2_STATUS_PIE_MSK);
  
  NIOS2_WRITE_STATUS (status);
#else
  NIOS2_WRITE_STATUS (context);
    5220:	2801703a 	wrctl	status,r5
    5224:	3801703a 	wrctl	status,r7
    5228:	0005883a 	mov	r2,zero
    522c:	f800283a 	ret
 
int alt_irq_register (alt_u32 id, 
                      void* context, 
                      alt_isr_func handler)
{
  int rc = -EINVAL;  
    5230:	00bffa84 	movi	r2,-22
    rc = (handler) ? alt_irq_enable (id): alt_irq_disable (id);

    alt_irq_enable_all(status);
  }
  return rc; 
}
    5234:	f800283a 	ret

00005238 <alt_load>:
 * there is no bootloader, so this application is responsible for loading to
 * RAM any sections that are required.
 */  

void alt_load (void)
{
    5238:	deffff04 	addi	sp,sp,-4
    523c:	01000034 	movhi	r4,0
    5240:	01400034 	movhi	r5,0
    5244:	dfc00015 	stw	ra,0(sp)
    5248:	21154404 	addi	r4,r4,21776
    524c:	29558104 	addi	r5,r5,22020

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    5250:	2140061e 	bne	r4,r5,526c <alt_load+0x34>
    5254:	01000034 	movhi	r4,0
    5258:	01400034 	movhi	r5,0
    525c:	21100804 	addi	r4,r4,16416
    5260:	29500804 	addi	r5,r5,16416
    5264:	2140121e 	bne	r4,r5,52b0 <alt_load+0x78>
    5268:	00000b06 	br	5298 <alt_load+0x60>
    526c:	00c00034 	movhi	r3,0
    5270:	18d58104 	addi	r3,r3,22020
    5274:	1907c83a 	sub	r3,r3,r4
    5278:	0005883a 	mov	r2,zero
  {
    while( to != end )
    527c:	10fff526 	beq	r2,r3,5254 <_gp+0xffff7c64>
    {
      *to++ = *from++;
    5280:	114f883a 	add	r7,r2,r5
    5284:	39c00017 	ldw	r7,0(r7)
    5288:	110d883a 	add	r6,r2,r4
    528c:	10800104 	addi	r2,r2,4
    5290:	31c00015 	stw	r7,0(r6)
    5294:	003ff906 	br	527c <_gp+0xffff7c8c>
    5298:	01000034 	movhi	r4,0
    529c:	01400034 	movhi	r5,0
    52a0:	21153404 	addi	r4,r4,21712
    52a4:	29553404 	addi	r5,r5,21712

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    52a8:	2140101e 	bne	r4,r5,52ec <alt_load+0xb4>
    52ac:	00000b06 	br	52dc <alt_load+0xa4>
    52b0:	00c00034 	movhi	r3,0
    52b4:	18d06004 	addi	r3,r3,16768
    52b8:	1907c83a 	sub	r3,r3,r4
    52bc:	0005883a 	mov	r2,zero
  {
    while( to != end )
    52c0:	10fff526 	beq	r2,r3,5298 <_gp+0xffff7ca8>
    {
      *to++ = *from++;
    52c4:	114f883a 	add	r7,r2,r5
    52c8:	39c00017 	ldw	r7,0(r7)
    52cc:	110d883a 	add	r6,r2,r4
    52d0:	10800104 	addi	r2,r2,4
    52d4:	31c00015 	stw	r7,0(r6)
    52d8:	003ff906 	br	52c0 <_gp+0xffff7cd0>
  
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
    52dc:	000544c0 	call	544c <alt_dcache_flush_all>
  alt_icache_flush_all();
}
    52e0:	dfc00017 	ldw	ra,0(sp)
    52e4:	dec00104 	addi	sp,sp,4
  /*
   * Now ensure that the caches are in synch.
   */
  
  alt_dcache_flush_all();
  alt_icache_flush_all();
    52e8:	00054501 	jmpi	5450 <alt_icache_flush_all>
    52ec:	00c00034 	movhi	r3,0
    52f0:	18d54404 	addi	r3,r3,21776
    52f4:	1907c83a 	sub	r3,r3,r4

static void ALT_INLINE alt_load_section (alt_u32* from, 
                                         alt_u32* to, 
                                         alt_u32* end)
{
  if (to != from)
    52f8:	0005883a 	mov	r2,zero
  {
    while( to != end )
    52fc:	18bff726 	beq	r3,r2,52dc <_gp+0xffff7cec>
    {
      *to++ = *from++;
    5300:	114f883a 	add	r7,r2,r5
    5304:	39c00017 	ldw	r7,0(r7)
    5308:	110d883a 	add	r6,r2,r4
    530c:	10800104 	addi	r2,r2,4
    5310:	31c00015 	stw	r7,0(r6)
    5314:	003ff906 	br	52fc <_gp+0xffff7d0c>

00005318 <alt_main>:
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    5318:	deffff04 	addi	sp,sp,-4
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    531c:	0009883a 	mov	r4,zero
 * devices/filesystems/components in the system; and call the entry point for
 * the users application, i.e. main().
 */

void alt_main (void)
{
    5320:	dfc00015 	stw	ra,0(sp)
#endif

  /* ALT LOG - please see HAL/sys/alt_log_printf.h for details */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Entering alt_main, calling alt_irq_init.\r\n");
  /* Initialize the interrupt controller. */
  alt_irq_init (NULL);
    5324:	00053a40 	call	53a4 <alt_irq_init>
  ALT_LOG_PRINT_BOOT("[alt_main.c] Done OS Init, calling alt_sem_create.\r\n");
  ALT_SEM_CREATE (&alt_fd_list_lock, 1);

  /* Initialize the device drivers/software components. */
  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling alt_sys_init.\r\n");
  alt_sys_init();
    5328:	00053c40 	call	53c4 <alt_sys_init>
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    532c:	d1a04617 	ldw	r6,-32488(gp)
    5330:	d1604717 	ldw	r5,-32484(gp)
    5334:	d1204817 	ldw	r4,-32480(gp)
  close(STDOUT_FILENO);
  exit (result);
#endif

  ALT_LOG_PRINT_BOOT("[alt_main.c] After main - we should not be here?.\r\n");
}
    5338:	dfc00017 	ldw	ra,0(sp)
    533c:	dec00104 	addi	sp,sp,4
   */

  ALT_LOG_PRINT_BOOT("[alt_main.c] Calling main.\r\n");

#ifdef ALT_NO_EXIT
  main (alt_argc, alt_argv, alt_envp);
    5340:	00045681 	jmpi	4568 <main>

00005344 <write>:
#if !defined(ALT_STDOUT_PRESENT) && !defined(ALT_STDERR_PRESENT)
    /* Generate a link time warning, should this function ever be called. */
    ALT_STUB_WARNING(write);
#endif

    switch (file) {
    5344:	00800044 	movi	r2,1
    5348:	20800226 	beq	r4,r2,5354 <write+0x10>
    534c:	00800084 	movi	r2,2
    5350:	2080041e 	bne	r4,r2,5364 <write+0x20>
    case 1: /* stdout file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDOUT_DEV, ptr, len, 0);
#endif /* ALT_STDOUT_PRESENT */
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
    5354:	01000034 	movhi	r4,0
    5358:	000f883a 	mov	r7,zero
    535c:	21157f04 	addi	r4,r4,22012
    5360:	00053c81 	jmpi	53c8 <altera_avalon_uart_write>

extern int errno;

static ALT_INLINE int* alt_get_errno(void)
{
  return ((alt_errno) ? alt_errno() : &errno);
    5364:	d0a00417 	ldw	r2,-32752(gp)
    5368:	10000926 	beq	r2,zero,5390 <write+0x4c>
 * Provide minimal version that just writes to the stdout/stderr devices
 * when provided.
 */

int ALT_WRITE (int file, const void *ptr, size_t len)
{
    536c:	deffff04 	addi	sp,sp,-4
    5370:	dfc00015 	stw	ra,0(sp)
    5374:	103ee83a 	callr	r2
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    5378:	00c01444 	movi	r3,81
    537c:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    5380:	00bfffc4 	movi	r2,-1
    5384:	dfc00017 	ldw	ra,0(sp)
    5388:	dec00104 	addi	sp,sp,4
    538c:	f800283a 	ret
    5390:	d0a04404 	addi	r2,gp,-32496
#ifdef ALT_STDERR_PRESENT
    case 2: /* stderr file descriptor */
        return ALT_DRIVER_WRITE(ALT_STDERR_DEV, ptr, len, 0);
#endif /* ALT_STDERR_PRESENT */
    default:
        ALT_ERRNO = EBADFD;
    5394:	00c01444 	movi	r3,81
    5398:	10c00015 	stw	r3,0(r2)
        return -1;
    }
}
    539c:	00bfffc4 	movi	r2,-1
    53a0:	f800283a 	ret

000053a4 <alt_irq_init>:
 * The "base" parameter is ignored and only
 * present for backwards-compatibility.
 */

void alt_irq_init ( const void* base )
{
    53a4:	deffff04 	addi	sp,sp,-4
    53a8:	dfc00015 	stw	ra,0(sp)
    ALTERA_NIOS2_GEN2_IRQ_INIT ( NIOS2_GEN2_0, nios2_gen2_0);
    53ac:	00054c80 	call	54c8 <altera_nios2_gen2_irq_init>
 * alt_irq_cpu_enable_interrupts() enables the CPU to start taking interrupts.
 */
static ALT_INLINE void ALT_ALWAYS_INLINE 
       alt_irq_cpu_enable_interrupts (void)
{
    NIOS2_WRITE_STATUS(NIOS2_STATUS_PIE_MSK
    53b0:	00800044 	movi	r2,1
    53b4:	1001703a 	wrctl	status,r2
    alt_irq_cpu_enable_interrupts();
}
    53b8:	dfc00017 	ldw	ra,0(sp)
    53bc:	dec00104 	addi	sp,sp,4
    53c0:	f800283a 	ret

000053c4 <alt_sys_init>:
 * Initialize the non-interrupt controller devices.
 * Called after alt_irq_init().
 */

void alt_sys_init( void )
{
    53c4:	f800283a 	ret

000053c8 <altera_avalon_uart_write>:
 */

int 
altera_avalon_uart_write(altera_avalon_uart_state* sp, const char* ptr, int len,
  int flags)
{
    53c8:	defffd04 	addi	sp,sp,-12
    53cc:	dc400115 	stw	r17,4(sp)
    53d0:	dc000015 	stw	r16,0(sp)
    53d4:	dfc00215 	stw	ra,8(sp)
    53d8:	3023883a 	mov	r17,r6
  int block;
  unsigned int status;
  int count;

  block = !(flags & O_NONBLOCK);
    53dc:	39d0000c 	andi	r7,r7,16384
  count = len;
    53e0:	3021883a 	mov	r16,r6

  do
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
    53e4:	20c00017 	ldw	r3,0(r4)
    53e8:	18800237 	ldwio	r2,8(r3)
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    53ec:	1080100c 	andi	r2,r2,64
    53f0:	10000526 	beq	r2,zero,5408 <altera_avalon_uart_write+0x40>
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
    53f4:	28800044 	addi	r2,r5,1
    53f8:	29400007 	ldb	r5,0(r5)
    53fc:	19400135 	stwio	r5,4(r3)
      count--;
    5400:	843fffc4 	addi	r16,r16,-1
  {
    status = IORD_ALTERA_AVALON_UART_STATUS(sp->base);
   
    if (status & ALTERA_AVALON_UART_STATUS_TRDY_MSK)
    {
      IOWR_ALTERA_AVALON_UART_TXDATA(sp->base, *ptr++);
    5404:	100b883a 	mov	r5,r2
      count--;
    }
  }
  while (block && count);
    5408:	3800021e 	bne	r7,zero,5414 <altera_avalon_uart_write+0x4c>
    540c:	803ff51e 	bne	r16,zero,53e4 <_gp+0xffff7df4>
    5410:	00000806 	br	5434 <altera_avalon_uart_write+0x6c>

  if (count)
    5414:	80000726 	beq	r16,zero,5434 <altera_avalon_uart_write+0x6c>
    5418:	d0a00417 	ldw	r2,-32752(gp)
    541c:	10000226 	beq	r2,zero,5428 <altera_avalon_uart_write+0x60>
    5420:	103ee83a 	callr	r2
    5424:	00000106 	br	542c <altera_avalon_uart_write+0x64>
    5428:	d0a04404 	addi	r2,gp,-32496
  {
    ALT_ERRNO = EWOULDBLOCK;
    542c:	00c002c4 	movi	r3,11
    5430:	10c00015 	stw	r3,0(r2)
  }

  return (len - count);
}
    5434:	8c05c83a 	sub	r2,r17,r16
    5438:	dfc00217 	ldw	ra,8(sp)
    543c:	dc400117 	ldw	r17,4(sp)
    5440:	dc000017 	ldw	r16,0(sp)
    5444:	dec00304 	addi	sp,sp,12
    5448:	f800283a 	ret

0000544c <alt_dcache_flush_all>:
/*
 * alt_dcache_flush_all() is called to flush the entire data cache.
 */

void alt_dcache_flush_all (void)
{
    544c:	f800283a 	ret

00005450 <alt_icache_flush_all>:
/*
 * alt_icache_flush_all() is called to flush the entire instruction cache.
 */

void alt_icache_flush_all (void)
{
    5450:	f800283a 	ret

00005454 <alt_exception_cause_generated_bad_addr>:
 *         0: BADADDR is not valid
 */
int 
alt_exception_cause_generated_bad_addr(alt_exception_cause cause)
{
  switch (cause) {
    5454:	213ffe84 	addi	r4,r4,-6
    5458:	008003c4 	movi	r2,15
    545c:	11001636 	bltu	r2,r4,54b8 <alt_exception_cause_generated_bad_addr+0x64>
    5460:	200890ba 	slli	r4,r4,2
    5464:	00800034 	movhi	r2,0
    5468:	10951e04 	addi	r2,r2,21624
    546c:	2089883a 	add	r4,r4,r2
    5470:	20800017 	ldw	r2,0(r4)
    5474:	1000683a 	jmp	r2
    5478:	000054c0 	call	54c <__alt_mem_onchip_memory2_0-0x3ab4>
    547c:	000054c0 	call	54c <__alt_mem_onchip_memory2_0-0x3ab4>
    5480:	000054b8 	rdprs	zero,zero,338
    5484:	000054b8 	rdprs	zero,zero,338
    5488:	000054b8 	rdprs	zero,zero,338
    548c:	000054c0 	call	54c <__alt_mem_onchip_memory2_0-0x3ab4>
    5490:	000054b8 	rdprs	zero,zero,338
    5494:	000054b8 	rdprs	zero,zero,338
    5498:	000054c0 	call	54c <__alt_mem_onchip_memory2_0-0x3ab4>
    549c:	000054c0 	call	54c <__alt_mem_onchip_memory2_0-0x3ab4>
    54a0:	000054b8 	rdprs	zero,zero,338
    54a4:	000054c0 	call	54c <__alt_mem_onchip_memory2_0-0x3ab4>
    54a8:	000054b8 	rdprs	zero,zero,338
    54ac:	000054b8 	rdprs	zero,zero,338
    54b0:	000054b8 	rdprs	zero,zero,338
    54b4:	000054c0 	call	54c <__alt_mem_onchip_memory2_0-0x3ab4>
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;

  case NIOS2_EXCEPTION_TLB_MISS:
  case NIOS2_EXCEPTION_ECC_TLB_ERR:
    return 0;
    54b8:	0005883a 	mov	r2,zero
    54bc:	f800283a 	ret
  case NIOS2_EXCEPTION_MISALIGNED_TARGET_PC:
  case NIOS2_EXCEPTION_TLB_READ_PERM_VIOLATION:
  case NIOS2_EXCEPTION_TLB_WRITE_PERM_VIOLATION:
  case NIOS2_EXCEPTION_MPU_DATA_REGION_VIOLATION:
  case NIOS2_EXCEPTION_ECC_DATA_ERR:
    return 1;
    54c0:	00800044 	movi	r2,1
    return 0;

  default:
    return 0;
  }
}
    54c4:	f800283a 	ret

000054c8 <altera_nios2_gen2_irq_init>:
 * To initialize the internal interrupt controller, just clear the IENABLE
 * register so that all possible IRQs are disabled.
 */
void altera_nios2_gen2_irq_init(void) 
{
    NIOS2_WRITE_IENABLE(0);
    54c8:	000170fa 	wrctl	ienable,zero
    54cc:	f800283a 	ret
